// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_compactTriangleIndices_Pipeline_VITIS_LOOP_506_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        enhanced_grid_flat_cells_triangle_count_load,
        phi_mul,
        tri_num_V_load,
        index_map_V_address0,
        index_map_V_ce0,
        index_map_V_q0,
        write_pos_out,
        write_pos_out_ap_vld,
        enhanced_grid_flat_cells_triangles_V_address0,
        enhanced_grid_flat_cells_triangles_V_ce0,
        enhanced_grid_flat_cells_triangles_V_we0,
        enhanced_grid_flat_cells_triangles_V_d0,
        enhanced_grid_flat_cells_triangles_V_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] enhanced_grid_flat_cells_triangle_count_load;
input  [16:0] phi_mul;
input  [13:0] tri_num_V_load;
output  [13:0] index_map_V_address0;
output   index_map_V_ce0;
input  [13:0] index_map_V_q0;
output  [31:0] write_pos_out;
output   write_pos_out_ap_vld;
output  [16:0] enhanced_grid_flat_cells_triangles_V_address0;
output   enhanced_grid_flat_cells_triangles_V_ce0;
output   enhanced_grid_flat_cells_triangles_V_we0;
output  [13:0] enhanced_grid_flat_cells_triangles_V_d0;
input  [13:0] enhanced_grid_flat_cells_triangles_V_q0;

reg ap_idle;
reg index_map_V_ce0;
reg write_pos_out_ap_vld;
reg[16:0] enhanced_grid_flat_cells_triangles_V_address0;
reg enhanced_grid_flat_cells_triangles_V_ce0;
reg enhanced_grid_flat_cells_triangles_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln506_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] icmp_ln506_reg_231;
wire   [30:0] add_ln506_fu_133_p2;
reg   [30:0] add_ln506_reg_235;
wire   [0:0] icmp_ln1027_fu_154_p2;
reg   [0:0] icmp_ln1027_reg_245;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [63:0] zext_ln507_fu_149_p1;
wire   [63:0] zext_ln541_fu_159_p1;
wire   [63:0] zext_ln510_fu_188_p1;
wire   [0:0] icmp_ln1023_fu_164_p2;
reg   [30:0] read_pos_fu_42;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_read_pos_1;
reg   [31:0] write_pos_fu_46;
wire   [31:0] write_pos_1_fu_173_p2;
wire   [31:0] read_pos_cast_fu_123_p1;
wire   [16:0] trunc_ln507_fu_139_p1;
wire   [16:0] add_ln507_fu_143_p2;
wire   [16:0] trunc_ln510_fu_179_p1;
wire   [16:0] add_ln510_fu_183_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

tri2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        read_pos_fu_42 <= 31'd0;
    end else if (((icmp_ln506_reg_231 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        read_pos_fu_42 <= add_ln506_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        write_pos_fu_46 <= 32'd0;
    end else if (((icmp_ln1023_fu_164_p2 == 1'd0) & (icmp_ln1027_reg_245 == 1'd1) & (icmp_ln506_reg_231 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        write_pos_fu_46 <= write_pos_1_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln506_reg_235 <= add_ln506_fu_133_p2;
        icmp_ln506_reg_231 <= icmp_ln506_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1027_reg_245 <= icmp_ln1027_fu_154_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln506_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_read_pos_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_read_pos_1 = read_pos_fu_42;
    end
end

always @ (*) begin
    if (((icmp_ln1023_fu_164_p2 == 1'd0) & (icmp_ln1027_reg_245 == 1'd1) & (icmp_ln506_reg_231 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        enhanced_grid_flat_cells_triangles_V_address0 = zext_ln510_fu_188_p1;
    end else if (((icmp_ln506_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        enhanced_grid_flat_cells_triangles_V_address0 = zext_ln507_fu_149_p1;
    end else begin
        enhanced_grid_flat_cells_triangles_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1023_fu_164_p2 == 1'd0) & (icmp_ln1027_reg_245 == 1'd1) & (icmp_ln506_reg_231 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln506_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b1;
    end else begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1023_fu_164_p2 == 1'd0) & (icmp_ln1027_reg_245 == 1'd1) & (icmp_ln506_reg_231 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        enhanced_grid_flat_cells_triangles_V_we0 = 1'b1;
    end else begin
        enhanced_grid_flat_cells_triangles_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        index_map_V_ce0 = 1'b1;
    end else begin
        index_map_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln506_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        write_pos_out_ap_vld = 1'b1;
    end else begin
        write_pos_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln506_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln506_fu_133_p2 = (ap_sig_allocacmp_read_pos_1 + 31'd1);

assign add_ln507_fu_143_p2 = (phi_mul + trunc_ln507_fu_139_p1);

assign add_ln510_fu_183_p2 = (phi_mul + trunc_ln510_fu_179_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign enhanced_grid_flat_cells_triangles_V_d0 = index_map_V_q0;

assign icmp_ln1023_fu_164_p2 = ((index_map_V_q0 == 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_154_p2 = ((enhanced_grid_flat_cells_triangles_V_q0 < tri_num_V_load) ? 1'b1 : 1'b0);

assign icmp_ln506_fu_127_p2 = (($signed(read_pos_cast_fu_123_p1) < $signed(enhanced_grid_flat_cells_triangle_count_load)) ? 1'b1 : 1'b0);

assign index_map_V_address0 = zext_ln541_fu_159_p1;

assign read_pos_cast_fu_123_p1 = ap_sig_allocacmp_read_pos_1;

assign trunc_ln507_fu_139_p1 = ap_sig_allocacmp_read_pos_1[16:0];

assign trunc_ln510_fu_179_p1 = write_pos_fu_46[16:0];

assign write_pos_1_fu_173_p2 = (write_pos_fu_46 + 32'd1);

assign write_pos_out = write_pos_fu_46;

assign zext_ln507_fu_149_p1 = add_ln507_fu_143_p2;

assign zext_ln510_fu_188_p1 = add_ln510_fu_183_p2;

assign zext_ln541_fu_159_p1 = enhanced_grid_flat_cells_triangles_V_q0;

endmodule //tri2d_compactTriangleIndices_Pipeline_VITIS_LOOP_506_6
