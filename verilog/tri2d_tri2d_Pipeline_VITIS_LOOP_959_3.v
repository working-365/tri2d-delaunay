// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_tri2d_Pipeline_VITIS_LOOP_959_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        enhanced_grid_x_min_V_load,
        enhanced_grid_y_min_V_load,
        enhanced_grid_x_max_V_load,
        enhanced_grid_y_max_V_load,
        points_with_z_index_V_address0,
        points_with_z_index_V_ce0,
        points_with_z_index_V_we0,
        points_with_z_index_V_d0,
        points_with_z_z_value_V_address0,
        points_with_z_z_value_V_ce0,
        points_with_z_z_value_V_we0,
        points_with_z_z_value_V_d0,
        valid_point_count_out,
        valid_point_count_out_ap_vld,
        vertex_used_V_address0,
        vertex_used_V_ce0,
        vertex_used_V_q0,
        vertex_x_V_address0,
        vertex_x_V_ce0,
        vertex_x_V_q0,
        vertex_y_V_address0,
        vertex_y_V_ce0,
        vertex_y_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] enhanced_grid_x_min_V_load;
input  [23:0] enhanced_grid_y_min_V_load;
input  [23:0] enhanced_grid_x_max_V_load;
input  [23:0] enhanced_grid_y_max_V_load;
output  [12:0] points_with_z_index_V_address0;
output   points_with_z_index_V_ce0;
output   points_with_z_index_V_we0;
output  [12:0] points_with_z_index_V_d0;
output  [12:0] points_with_z_z_value_V_address0;
output   points_with_z_z_value_V_ce0;
output   points_with_z_z_value_V_we0;
output  [15:0] points_with_z_z_value_V_d0;
output  [31:0] valid_point_count_out;
output   valid_point_count_out_ap_vld;
output  [12:0] vertex_used_V_address0;
output   vertex_used_V_ce0;
input  [0:0] vertex_used_V_q0;
output  [12:0] vertex_x_V_address0;
output   vertex_x_V_ce0;
input  [23:0] vertex_x_V_q0;
output  [12:0] vertex_y_V_address0;
output   vertex_y_V_ce0;
input  [23:0] vertex_y_V_q0;

reg ap_idle;
reg points_with_z_index_V_ce0;
reg points_with_z_index_V_we0;
reg points_with_z_z_value_V_ce0;
reg points_with_z_z_value_V_we0;
reg valid_point_count_out_ap_vld;
reg vertex_used_V_ce0;
reg vertex_x_V_ce0;
reg vertex_y_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln959_fu_181_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [12:0] i_1_reg_261;
reg   [0:0] icmp_ln959_reg_266;
reg   [0:0] icmp_ln959_reg_266_pp0_iter1_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter2_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter3_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter4_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter5_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter6_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter7_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter8_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter9_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter10_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter11_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter12_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter13_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter14_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter15_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter16_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter17_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter18_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter19_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter20_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter21_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter22_reg;
reg   [0:0] icmp_ln959_reg_266_pp0_iter23_reg;
wire   [63:0] zext_ln959_fu_187_p1;
reg   [63:0] zext_ln959_reg_270;
reg   [0:0] vertex_used_V_load_reg_281;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter2_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter3_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter4_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter5_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter6_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter7_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter8_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter9_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter10_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter11_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter12_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter13_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter14_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter15_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter16_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter17_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter18_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter19_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter20_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter21_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter22_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter23_reg;
reg   [0:0] vertex_used_V_load_reg_281_pp0_iter24_reg;
wire   [63:0] zext_ln971_fu_206_p1;
reg   [63:0] zext_ln971_reg_295;
reg   [63:0] zext_ln971_reg_295_pp0_iter2_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter3_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter4_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter5_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter6_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter7_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter8_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter9_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter10_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter11_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter12_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter13_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter14_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter15_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter16_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter17_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter18_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter19_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter20_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter21_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter22_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter23_reg;
reg   [63:0] zext_ln971_reg_295_pp0_iter24_reg;
wire   [15:0] grp_getHilbertCode_fu_156_ap_return;
reg   [15:0] hilbert_value_V_reg_310;
wire    ap_block_pp0_stage0;
reg   [12:0] pointIdx_V_fu_52;
wire   [12:0] i_fu_192_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i_1;
reg   [31:0] valid_point_count_fu_56;
wire   [31:0] valid_point_count_1_fu_211_p2;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tri2d_getHilbertCode grp_getHilbertCode_fu_156(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(vertex_x_V_q0),
    .y(vertex_y_V_q0),
    .x_min(enhanced_grid_x_min_V_load),
    .y_min(enhanced_grid_y_min_V_load),
    .x_max(enhanced_grid_x_max_V_load),
    .y_max(enhanced_grid_y_max_V_load),
    .ap_return(grp_getHilbertCode_fu_156_ap_return)
);

tri2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter24_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln959_fu_181_p2 == 1'd0))) begin
            pointIdx_V_fu_52 <= i_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            pointIdx_V_fu_52 <= 13'd3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            valid_point_count_fu_56 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (vertex_used_V_q0 == 1'd1))) begin
            valid_point_count_fu_56 <= valid_point_count_1_fu_211_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln959_reg_266_pp0_iter10_reg <= icmp_ln959_reg_266_pp0_iter9_reg;
        icmp_ln959_reg_266_pp0_iter11_reg <= icmp_ln959_reg_266_pp0_iter10_reg;
        icmp_ln959_reg_266_pp0_iter12_reg <= icmp_ln959_reg_266_pp0_iter11_reg;
        icmp_ln959_reg_266_pp0_iter13_reg <= icmp_ln959_reg_266_pp0_iter12_reg;
        icmp_ln959_reg_266_pp0_iter14_reg <= icmp_ln959_reg_266_pp0_iter13_reg;
        icmp_ln959_reg_266_pp0_iter15_reg <= icmp_ln959_reg_266_pp0_iter14_reg;
        icmp_ln959_reg_266_pp0_iter16_reg <= icmp_ln959_reg_266_pp0_iter15_reg;
        icmp_ln959_reg_266_pp0_iter17_reg <= icmp_ln959_reg_266_pp0_iter16_reg;
        icmp_ln959_reg_266_pp0_iter18_reg <= icmp_ln959_reg_266_pp0_iter17_reg;
        icmp_ln959_reg_266_pp0_iter19_reg <= icmp_ln959_reg_266_pp0_iter18_reg;
        icmp_ln959_reg_266_pp0_iter20_reg <= icmp_ln959_reg_266_pp0_iter19_reg;
        icmp_ln959_reg_266_pp0_iter21_reg <= icmp_ln959_reg_266_pp0_iter20_reg;
        icmp_ln959_reg_266_pp0_iter22_reg <= icmp_ln959_reg_266_pp0_iter21_reg;
        icmp_ln959_reg_266_pp0_iter23_reg <= icmp_ln959_reg_266_pp0_iter22_reg;
        icmp_ln959_reg_266_pp0_iter2_reg <= icmp_ln959_reg_266_pp0_iter1_reg;
        icmp_ln959_reg_266_pp0_iter3_reg <= icmp_ln959_reg_266_pp0_iter2_reg;
        icmp_ln959_reg_266_pp0_iter4_reg <= icmp_ln959_reg_266_pp0_iter3_reg;
        icmp_ln959_reg_266_pp0_iter5_reg <= icmp_ln959_reg_266_pp0_iter4_reg;
        icmp_ln959_reg_266_pp0_iter6_reg <= icmp_ln959_reg_266_pp0_iter5_reg;
        icmp_ln959_reg_266_pp0_iter7_reg <= icmp_ln959_reg_266_pp0_iter6_reg;
        icmp_ln959_reg_266_pp0_iter8_reg <= icmp_ln959_reg_266_pp0_iter7_reg;
        icmp_ln959_reg_266_pp0_iter9_reg <= icmp_ln959_reg_266_pp0_iter8_reg;
        vertex_used_V_load_reg_281_pp0_iter10_reg <= vertex_used_V_load_reg_281_pp0_iter9_reg;
        vertex_used_V_load_reg_281_pp0_iter11_reg <= vertex_used_V_load_reg_281_pp0_iter10_reg;
        vertex_used_V_load_reg_281_pp0_iter12_reg <= vertex_used_V_load_reg_281_pp0_iter11_reg;
        vertex_used_V_load_reg_281_pp0_iter13_reg <= vertex_used_V_load_reg_281_pp0_iter12_reg;
        vertex_used_V_load_reg_281_pp0_iter14_reg <= vertex_used_V_load_reg_281_pp0_iter13_reg;
        vertex_used_V_load_reg_281_pp0_iter15_reg <= vertex_used_V_load_reg_281_pp0_iter14_reg;
        vertex_used_V_load_reg_281_pp0_iter16_reg <= vertex_used_V_load_reg_281_pp0_iter15_reg;
        vertex_used_V_load_reg_281_pp0_iter17_reg <= vertex_used_V_load_reg_281_pp0_iter16_reg;
        vertex_used_V_load_reg_281_pp0_iter18_reg <= vertex_used_V_load_reg_281_pp0_iter17_reg;
        vertex_used_V_load_reg_281_pp0_iter19_reg <= vertex_used_V_load_reg_281_pp0_iter18_reg;
        vertex_used_V_load_reg_281_pp0_iter20_reg <= vertex_used_V_load_reg_281_pp0_iter19_reg;
        vertex_used_V_load_reg_281_pp0_iter21_reg <= vertex_used_V_load_reg_281_pp0_iter20_reg;
        vertex_used_V_load_reg_281_pp0_iter22_reg <= vertex_used_V_load_reg_281_pp0_iter21_reg;
        vertex_used_V_load_reg_281_pp0_iter23_reg <= vertex_used_V_load_reg_281_pp0_iter22_reg;
        vertex_used_V_load_reg_281_pp0_iter24_reg <= vertex_used_V_load_reg_281_pp0_iter23_reg;
        vertex_used_V_load_reg_281_pp0_iter2_reg <= vertex_used_V_load_reg_281;
        vertex_used_V_load_reg_281_pp0_iter3_reg <= vertex_used_V_load_reg_281_pp0_iter2_reg;
        vertex_used_V_load_reg_281_pp0_iter4_reg <= vertex_used_V_load_reg_281_pp0_iter3_reg;
        vertex_used_V_load_reg_281_pp0_iter5_reg <= vertex_used_V_load_reg_281_pp0_iter4_reg;
        vertex_used_V_load_reg_281_pp0_iter6_reg <= vertex_used_V_load_reg_281_pp0_iter5_reg;
        vertex_used_V_load_reg_281_pp0_iter7_reg <= vertex_used_V_load_reg_281_pp0_iter6_reg;
        vertex_used_V_load_reg_281_pp0_iter8_reg <= vertex_used_V_load_reg_281_pp0_iter7_reg;
        vertex_used_V_load_reg_281_pp0_iter9_reg <= vertex_used_V_load_reg_281_pp0_iter8_reg;
        zext_ln971_reg_295_pp0_iter10_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter9_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter11_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter10_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter12_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter11_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter13_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter12_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter14_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter13_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter15_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter14_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter16_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter15_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter17_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter16_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter18_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter17_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter19_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter18_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter20_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter19_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter21_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter20_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter22_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter21_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter23_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter22_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter24_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter23_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter2_reg[31 : 0] <= zext_ln971_reg_295[31 : 0];
        zext_ln971_reg_295_pp0_iter3_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter2_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter4_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter3_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter5_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter4_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter6_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter5_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter7_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter6_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter8_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter7_reg[31 : 0];
        zext_ln971_reg_295_pp0_iter9_reg[31 : 0] <= zext_ln971_reg_295_pp0_iter8_reg[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_261 <= ap_sig_allocacmp_i_1;
        icmp_ln959_reg_266 <= icmp_ln959_fu_181_p2;
        icmp_ln959_reg_266_pp0_iter1_reg <= icmp_ln959_reg_266;
        vertex_used_V_load_reg_281 <= vertex_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((vertex_used_V_load_reg_281_pp0_iter23_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hilbert_value_V_reg_310 <= grp_getHilbertCode_fu_156_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln959_fu_181_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln959_reg_270[12 : 0] <= zext_ln959_fu_187_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (vertex_used_V_q0 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln971_reg_295[31 : 0] <= zext_ln971_fu_206_p1[31 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln959_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter24_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 13'd3;
    end else begin
        ap_sig_allocacmp_i_1 = pointIdx_V_fu_52;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        points_with_z_index_V_ce0 = 1'b1;
    end else begin
        points_with_z_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (vertex_used_V_q0 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        points_with_z_index_V_we0 = 1'b1;
    end else begin
        points_with_z_index_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        points_with_z_z_value_V_ce0 = 1'b1;
    end else begin
        points_with_z_z_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (vertex_used_V_load_reg_281_pp0_iter24_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        points_with_z_z_value_V_we0 = 1'b1;
    end else begin
        points_with_z_z_value_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln959_reg_266_pp0_iter23_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        valid_point_count_out_ap_vld = 1'b1;
    end else begin
        valid_point_count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vertex_used_V_ce0 = 1'b1;
    end else begin
        vertex_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vertex_x_V_ce0 = 1'b1;
    end else begin
        vertex_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vertex_y_V_ce0 = 1'b1;
    end else begin
        vertex_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_fu_192_p2 = (ap_sig_allocacmp_i_1 + 13'd1);

assign icmp_ln959_fu_181_p2 = ((ap_sig_allocacmp_i_1 == 13'd5003) ? 1'b1 : 1'b0);

assign points_with_z_index_V_address0 = zext_ln971_fu_206_p1;

assign points_with_z_index_V_d0 = i_1_reg_261;

assign points_with_z_z_value_V_address0 = zext_ln971_reg_295_pp0_iter24_reg;

assign points_with_z_z_value_V_d0 = hilbert_value_V_reg_310;

assign valid_point_count_1_fu_211_p2 = (valid_point_count_fu_56 + 32'd1);

assign valid_point_count_out = valid_point_count_fu_56;

assign vertex_used_V_address0 = zext_ln959_fu_187_p1;

assign vertex_x_V_address0 = zext_ln959_reg_270;

assign vertex_y_V_address0 = zext_ln959_reg_270;

assign zext_ln959_fu_187_p1 = ap_sig_allocacmp_i_1;

assign zext_ln971_fu_206_p1 = valid_point_count_fu_56;

always @ (posedge ap_clk) begin
    zext_ln959_reg_270[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln971_reg_295[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter2_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter3_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter4_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter5_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter6_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter7_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter8_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter9_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter10_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter11_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter12_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter13_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter14_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter15_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter16_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter17_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter18_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter19_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter20_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter21_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter22_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter23_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln971_reg_295_pp0_iter24_reg[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //tri2d_tri2d_Pipeline_VITIS_LOOP_959_3
