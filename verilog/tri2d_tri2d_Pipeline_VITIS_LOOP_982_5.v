// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_tri2d_Pipeline_VITIS_LOOP_982_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln978_1,
        points_with_z_index_V_address0,
        points_with_z_index_V_ce0,
        points_with_z_index_V_we0,
        points_with_z_index_V_d0,
        points_with_z_index_V_q0,
        points_with_z_z_value_V_address0,
        points_with_z_z_value_V_ce0,
        points_with_z_z_value_V_we0,
        points_with_z_z_value_V_d0,
        points_with_z_z_value_V_q0,
        temp_z_value_V,
        j_1_out,
        j_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] zext_ln978_1;
output  [12:0] points_with_z_index_V_address0;
output   points_with_z_index_V_ce0;
output   points_with_z_index_V_we0;
output  [12:0] points_with_z_index_V_d0;
input  [12:0] points_with_z_index_V_q0;
output  [12:0] points_with_z_z_value_V_address0;
output   points_with_z_z_value_V_ce0;
output   points_with_z_z_value_V_we0;
output  [15:0] points_with_z_z_value_V_d0;
input  [15:0] points_with_z_z_value_V_q0;
input  [15:0] temp_z_value_V;
output  [12:0] j_1_out;
output   j_1_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] points_with_z_index_V_address0;
reg points_with_z_index_V_ce0;
reg points_with_z_index_V_we0;
reg[12:0] points_with_z_z_value_V_address0;
reg points_with_z_z_value_V_ce0;
reg points_with_z_z_value_V_we0;
reg[12:0] j_1_out;
reg j_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] empty_fu_152_p1;
reg   [12:0] empty_reg_289;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln982_fu_156_p2;
reg   [0:0] icmp_ln982_reg_295;
wire   [31:0] add_ln984_fu_162_p2;
reg   [31:0] add_ln984_reg_299;
wire   [63:0] zext_ln1035_fu_172_p1;
reg   [63:0] zext_ln1035_reg_304;
wire   [63:0] j_1_cast_cast_fu_177_p1;
reg   [63:0] j_1_cast_cast_reg_316;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1035_fu_201_p2;
wire   [0:0] addr_cmp5_fu_209_p2;
reg   [0:0] addr_cmp5_reg_329;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran3to5_state3;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [63:0] reuse_addr_reg2_fu_38;
reg   [12:0] reuse_reg1_fu_42;
wire   [12:0] reuse_select6_fu_236_p3;
reg   [63:0] reuse_addr_reg_fu_46;
reg   [15:0] reuse_reg_fu_50;
wire   [15:0] reuse_select_fu_192_p3;
reg   [31:0] j_fu_54;
wire   [31:0] zext_ln978_1_cast_fu_120_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [12:0] trunc_ln1035_fu_168_p1;
wire   [0:0] addr_cmp_fu_187_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_54 <= zext_ln978_1_cast_fu_120_p1;
    end else if (((icmp_ln1035_fu_201_p2 == 1'd1) & (icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_54 <= add_ln984_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reuse_addr_reg2_fu_38 <= 64'd18446744073709551615;
    end else if (((icmp_ln1035_fu_201_p2 == 1'd1) & (icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg2_fu_38 <= j_1_cast_cast_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reuse_addr_reg_fu_46 <= 64'd18446744073709551615;
    end else if (((icmp_ln1035_fu_201_p2 == 1'd1) & (icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg_fu_46 <= j_1_cast_cast_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reuse_reg1_fu_42 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        reuse_reg1_fu_42 <= reuse_select6_fu_236_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reuse_reg_fu_50 <= 16'd0;
    end else if (((icmp_ln1035_fu_201_p2 == 1'd1) & (icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_reg_fu_50 <= reuse_select_fu_192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln982_fu_156_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln984_reg_299 <= add_ln984_fu_162_p2;
        zext_ln1035_reg_304[12 : 0] <= zext_ln1035_fu_172_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1035_fu_201_p2 == 1'd1) & (icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        addr_cmp5_reg_329 <= addr_cmp5_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_289 <= empty_fu_152_p1;
        icmp_ln982_reg_295 <= icmp_ln982_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_1_cast_cast_reg_316[12 : 0] <= j_1_cast_cast_fu_177_p1[12 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln982_reg_295 == 1'd1) | (ap_predicate_tran3to5_state3 == 1'b1))) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_out = 13'd0;
    end else if (((icmp_ln982_reg_295 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_out = empty_reg_289;
    end else begin
        j_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln982_reg_295 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        j_1_out_ap_vld = 1'b1;
    end else begin
        j_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        points_with_z_index_V_address0 = j_1_cast_cast_reg_316;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        points_with_z_index_V_address0 = zext_ln1035_reg_304;
    end else begin
        points_with_z_index_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        points_with_z_index_V_ce0 = 1'b1;
    end else begin
        points_with_z_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        points_with_z_index_V_we0 = 1'b1;
    end else begin
        points_with_z_index_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            points_with_z_z_value_V_address0 = j_1_cast_cast_fu_177_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            points_with_z_z_value_V_address0 = zext_ln1035_fu_172_p1;
        end else begin
            points_with_z_z_value_V_address0 = 'bx;
        end
    end else begin
        points_with_z_z_value_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        points_with_z_z_value_V_ce0 = 1'b1;
    end else begin
        points_with_z_z_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1035_fu_201_p2 == 1'd1) & (icmp_ln982_reg_295 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        points_with_z_z_value_V_we0 = 1'b1;
    end else begin
        points_with_z_z_value_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~(((icmp_ln982_reg_295 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran3to5_state3 == 1'b1))) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln982_reg_295 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran3to5_state3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln984_fu_162_p2 = ($signed(j_fu_54) + $signed(32'd4294967295));

assign addr_cmp5_fu_209_p2 = ((reuse_addr_reg2_fu_38 == zext_ln1035_reg_304) ? 1'b1 : 1'b0);

assign addr_cmp_fu_187_p2 = ((reuse_addr_reg_fu_46 == zext_ln1035_reg_304) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran3to5_state3 = ((icmp_ln1035_fu_201_p2 == 1'd0) & (icmp_ln982_reg_295 == 1'd0));
end

assign empty_fu_152_p1 = j_fu_54[12:0];

assign icmp_ln1035_fu_201_p2 = ((reuse_select_fu_192_p3 > temp_z_value_V) ? 1'b1 : 1'b0);

assign icmp_ln982_fu_156_p2 = ((j_fu_54 == 32'd0) ? 1'b1 : 1'b0);

assign j_1_cast_cast_fu_177_p1 = empty_reg_289;

assign points_with_z_index_V_d0 = ((addr_cmp5_reg_329[0:0] == 1'b1) ? reuse_reg1_fu_42 : points_with_z_index_V_q0);

assign points_with_z_z_value_V_d0 = reuse_select_fu_192_p3;

assign reuse_select6_fu_236_p3 = ((addr_cmp5_reg_329[0:0] == 1'b1) ? reuse_reg1_fu_42 : points_with_z_index_V_q0);

assign reuse_select_fu_192_p3 = ((addr_cmp_fu_187_p2[0:0] == 1'b1) ? reuse_reg_fu_50 : points_with_z_z_value_V_q0);

assign trunc_ln1035_fu_168_p1 = add_ln984_fu_162_p2[12:0];

assign zext_ln1035_fu_172_p1 = trunc_ln1035_fu_168_p1;

assign zext_ln978_1_cast_fu_120_p1 = zext_ln978_1;

always @ (posedge ap_clk) begin
    zext_ln1035_reg_304[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    j_1_cast_cast_reg_316[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //tri2d_tri2d_Pipeline_VITIS_LOOP_982_5
