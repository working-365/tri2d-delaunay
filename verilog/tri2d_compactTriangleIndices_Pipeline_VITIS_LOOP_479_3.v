// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_compactTriangleIndices_Pipeline_VITIS_LOOP_479_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tri_num_V_load,
        face_used_V_address0,
        face_used_V_ce0,
        face_used_V_we0,
        face_used_V_d0,
        face_used_V_address1,
        face_used_V_ce1,
        face_used_V_q1,
        face_edge_V_address0,
        face_edge_V_ce0,
        face_edge_V_we0,
        face_edge_V_d0,
        face_edge_V_q0,
        face_prev_V_address0,
        face_prev_V_ce0,
        face_prev_V_we0,
        face_prev_V_d0,
        face_prev_V_q0,
        face_next_V_address0,
        face_next_V_ce0,
        face_next_V_we0,
        face_next_V_d0,
        face_next_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] tri_num_V_load;
output  [13:0] face_used_V_address0;
output   face_used_V_ce0;
output   face_used_V_we0;
output  [0:0] face_used_V_d0;
output  [13:0] face_used_V_address1;
output   face_used_V_ce1;
input  [0:0] face_used_V_q1;
output  [13:0] face_edge_V_address0;
output   face_edge_V_ce0;
output   face_edge_V_we0;
output  [14:0] face_edge_V_d0;
input  [14:0] face_edge_V_q0;
output  [13:0] face_prev_V_address0;
output   face_prev_V_ce0;
output   face_prev_V_we0;
output  [13:0] face_prev_V_d0;
input  [13:0] face_prev_V_q0;
output  [13:0] face_next_V_address0;
output   face_next_V_ce0;
output   face_next_V_we0;
output  [13:0] face_next_V_d0;
input  [13:0] face_next_V_q0;

reg ap_idle;
reg[13:0] face_used_V_address0;
reg face_used_V_ce0;
reg face_used_V_we0;
reg[0:0] face_used_V_d0;
reg face_used_V_ce1;
reg[13:0] face_edge_V_address0;
reg face_edge_V_ce0;
reg face_edge_V_we0;
reg[13:0] face_prev_V_address0;
reg face_prev_V_ce0;
reg face_prev_V_we0;
reg[13:0] face_next_V_address0;
reg face_next_V_ce0;
reg face_next_V_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln1027_reg_225;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [13:0] read_ptr_V_1_reg_220;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1027_fu_160_p2;
wire   [63:0] read_ptr_V_cast_fu_172_p1;
reg   [63:0] read_ptr_V_cast_reg_229;
reg   [13:0] face_used_V_addr_reg_236;
reg   [0:0] face_used_V_load_reg_242;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln1023_fu_185_p1;
reg   [63:0] zext_ln1023_reg_246;
wire   [0:0] icmp_ln1023_fu_190_p2;
reg   [0:0] icmp_ln1023_reg_253;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [13:0] read_ptr_V_fu_40;
wire   [13:0] add_ln840_fu_166_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_read_ptr_V_1;
reg   [13:0] write_ptr_V_fu_44;
wire   [13:0] write_ptr_V_3_fu_195_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tri2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            read_ptr_V_fu_40 <= add_ln840_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            read_ptr_V_fu_40 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        write_ptr_V_fu_44 <= 14'd0;
    end else if (((face_used_V_q1 == 1'd1) & (icmp_ln1027_reg_225 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        write_ptr_V_fu_44 <= write_ptr_V_3_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_used_V_addr_reg_236 <= read_ptr_V_cast_fu_172_p1;
        read_ptr_V_cast_reg_229[13 : 0] <= read_ptr_V_cast_fu_172_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_225 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_used_V_load_reg_242 <= face_used_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((face_used_V_q1 == 1'd1) & (icmp_ln1027_reg_225 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1023_reg_253 <= icmp_ln1023_fu_190_p2;
        zext_ln1023_reg_246[13 : 0] <= zext_ln1023_fu_185_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_reg_225 <= icmp_ln1027_fu_160_p2;
        read_ptr_V_1_reg_220 <= ap_sig_allocacmp_read_ptr_V_1;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_225 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_read_ptr_V_1 = 14'd0;
    end else begin
        ap_sig_allocacmp_read_ptr_V_1 = read_ptr_V_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_edge_V_address0 = zext_ln1023_reg_246;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_edge_V_address0 = read_ptr_V_cast_reg_229;
    end else begin
        face_edge_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        face_edge_V_ce0 = 1'b1;
    end else begin
        face_edge_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1023_reg_253 == 1'd0) & (face_used_V_load_reg_242 == 1'd1))) begin
        face_edge_V_we0 = 1'b1;
    end else begin
        face_edge_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_next_V_address0 = zext_ln1023_reg_246;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_next_V_address0 = read_ptr_V_cast_reg_229;
    end else begin
        face_next_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        face_next_V_ce0 = 1'b1;
    end else begin
        face_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1023_reg_253 == 1'd0) & (face_used_V_load_reg_242 == 1'd1))) begin
        face_next_V_we0 = 1'b1;
    end else begin
        face_next_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_prev_V_address0 = zext_ln1023_reg_246;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_prev_V_address0 = read_ptr_V_cast_reg_229;
    end else begin
        face_prev_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        face_prev_V_ce0 = 1'b1;
    end else begin
        face_prev_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1023_reg_253 == 1'd0) & (face_used_V_load_reg_242 == 1'd1))) begin
        face_prev_V_we0 = 1'b1;
    end else begin
        face_prev_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_used_V_address0 = face_used_V_addr_reg_236;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_used_V_address0 = zext_ln1023_fu_185_p1;
    end else begin
        face_used_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        face_used_V_ce0 = 1'b1;
    end else begin
        face_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_used_V_ce1 = 1'b1;
    end else begin
        face_used_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_used_V_d0 = 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_used_V_d0 = 1'd1;
    end else begin
        face_used_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1023_reg_253 == 1'd0) & (face_used_V_load_reg_242 == 1'd1)) | ((face_used_V_q1 == 1'd1) & (icmp_ln1027_reg_225 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1023_fu_190_p2 == 1'd0)))) begin
        face_used_V_we0 = 1'b1;
    end else begin
        face_used_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln840_fu_166_p2 = (ap_sig_allocacmp_read_ptr_V_1 + 14'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign face_edge_V_d0 = face_edge_V_q0;

assign face_next_V_d0 = face_next_V_q0;

assign face_prev_V_d0 = face_prev_V_q0;

assign face_used_V_address1 = read_ptr_V_cast_fu_172_p1;

assign icmp_ln1023_fu_190_p2 = ((read_ptr_V_1_reg_220 == write_ptr_V_fu_44) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_160_p2 = ((ap_sig_allocacmp_read_ptr_V_1 == tri_num_V_load) ? 1'b1 : 1'b0);

assign read_ptr_V_cast_fu_172_p1 = ap_sig_allocacmp_read_ptr_V_1;

assign write_ptr_V_3_fu_195_p2 = (write_ptr_V_fu_44 + 14'd1);

assign zext_ln1023_fu_185_p1 = write_ptr_V_fu_44;

always @ (posedge ap_clk) begin
    read_ptr_V_cast_reg_229[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln1023_reg_246[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //tri2d_compactTriangleIndices_Pipeline_VITIS_LOOP_479_3
