// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_locateTriangleSimple_Pipeline_VITIS_LOOP_287_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        retval_149,
        enhanced_grid_flat_cells_triangle_count_load,
        mul_ln288,
        sext_ln1348_2,
        sext_ln1348,
        retval_2_out,
        retval_2_out_ap_vld,
        select_ln298_out,
        select_ln298_out_ap_vld,
        enhanced_grid_flat_cells_triangles_V_address0,
        enhanced_grid_flat_cells_triangles_V_ce0,
        enhanced_grid_flat_cells_triangles_V_q0,
        face_used_V_address0,
        face_used_V_ce0,
        face_used_V_q0,
        face_edge_V_address0,
        face_edge_V_ce0,
        face_edge_V_q0,
        he_tail_V_address0,
        he_tail_V_ce0,
        he_tail_V_q0,
        he_next_V_address0,
        he_next_V_ce0,
        he_next_V_q0,
        vertex_x_V_address0,
        vertex_x_V_ce0,
        vertex_x_V_q0,
        vertex_y_V_address0,
        vertex_y_V_ce0,
        vertex_y_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] retval_149;
input  [31:0] enhanced_grid_flat_cells_triangle_count_load;
input  [16:0] mul_ln288;
input  [23:0] sext_ln1348_2;
input  [23:0] sext_ln1348;
output  [31:0] retval_2_out;
output   retval_2_out_ap_vld;
output  [13:0] select_ln298_out;
output   select_ln298_out_ap_vld;
output  [16:0] enhanced_grid_flat_cells_triangles_V_address0;
output   enhanced_grid_flat_cells_triangles_V_ce0;
input  [13:0] enhanced_grid_flat_cells_triangles_V_q0;
output  [13:0] face_used_V_address0;
output   face_used_V_ce0;
input  [0:0] face_used_V_q0;
output  [13:0] face_edge_V_address0;
output   face_edge_V_ce0;
input  [14:0] face_edge_V_q0;
output  [15:0] he_tail_V_address0;
output   he_tail_V_ce0;
input  [12:0] he_tail_V_q0;
output  [15:0] he_next_V_address0;
output   he_next_V_ce0;
input  [14:0] he_next_V_q0;
output  [12:0] vertex_x_V_address0;
output   vertex_x_V_ce0;
input  [23:0] vertex_x_V_q0;
output  [12:0] vertex_y_V_address0;
output   vertex_y_V_ce0;
input  [23:0] vertex_y_V_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] retval_2_out;
reg retval_2_out_ap_vld;
reg select_ln298_out_ap_vld;
reg enhanced_grid_flat_cells_triangles_V_ce0;
reg face_used_V_ce0;
reg face_edge_V_ce0;
reg[15:0] he_tail_V_address0;
reg he_tail_V_ce0;
reg[15:0] he_next_V_address0;
reg he_next_V_ce0;
reg[12:0] vertex_x_V_address0;
reg vertex_x_V_ce0;
reg[12:0] vertex_y_V_address0;
reg vertex_y_V_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [24:0] sext_ln1348_cast_fu_301_p1;
reg  signed [24:0] sext_ln1348_cast_reg_755;
wire  signed [24:0] sext_ln1348_2_cast_fu_305_p1;
reg  signed [24:0] sext_ln1348_2_cast_reg_762;
wire   [0:0] icmp_ln287_fu_326_p2;
reg   [0:0] icmp_ln287_reg_769;
wire    ap_CS_fsm_state2;
wire   [30:0] add_ln287_fu_331_p2;
reg   [30:0] add_ln287_reg_773;
reg   [13:0] tri_V_reg_783;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1023_fu_351_p2;
reg   [0:0] icmp_ln1023_reg_788;
wire   [63:0] zext_ln541_fu_357_p1;
reg   [63:0] zext_ln541_reg_792;
reg   [0:0] face_used_V_load_reg_802;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [0:0] grp_fu_291_p2;
reg   [0:0] icmp_ln1027_reg_831;
wire    ap_CS_fsm_state7;
wire   [23:0] p1_x_V_fu_385_p3;
reg   [23:0] p1_x_V_reg_852;
wire   [23:0] p_y_V_fu_392_p3;
reg   [23:0] p_y_V_reg_857;
reg   [0:0] icmp_ln1027_4_reg_862;
reg   [0:0] icmp_ln1027_5_reg_878;
wire    ap_CS_fsm_state8;
wire  signed [24:0] sext_ln1348_10_fu_425_p1;
reg  signed [24:0] sext_ln1348_10_reg_894;
wire  signed [24:0] sext_ln1348_11_fu_429_p1;
reg  signed [24:0] sext_ln1348_11_reg_900;
wire  signed [24:0] sext_ln1348_12_fu_438_p1;
reg  signed [24:0] sext_ln1348_12_reg_905;
wire  signed [24:0] sext_ln1348_13_fu_460_p1;
reg  signed [24:0] sext_ln1348_13_reg_910;
reg   [32:0] cross1_V_reg_916;
reg   [32:0] cross2_V_reg_922;
wire    ap_CS_fsm_state9;
wire   [24:0] ret_V_35_fu_589_p2;
reg  signed [24:0] ret_V_35_reg_928;
wire   [24:0] ret_V_27_fu_594_p2;
reg  signed [24:0] ret_V_27_reg_933;
wire   [24:0] ret_V_36_fu_599_p2;
reg  signed [24:0] ret_V_36_reg_938;
wire   [24:0] ret_V_29_fu_604_p2;
reg  signed [24:0] ret_V_29_reg_943;
reg   [31:0] retval_2_load_1_reg_948;
wire    ap_CS_fsm_state10;
wire   [13:0] empty_fu_718_p1;
reg   [13:0] empty_reg_956;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_283_p4;
reg   [0:0] UnifiedRetVal_reg_279;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln288_fu_346_p1;
wire   [63:0] zext_ln541_9_fu_362_p1;
wire   [63:0] zext_ln541_10_fu_368_p1;
wire   [63:0] zext_ln541_12_fu_374_p1;
wire   [63:0] zext_ln541_11_fu_380_p1;
wire   [63:0] zext_ln541_13_fu_399_p1;
wire   [63:0] zext_ln541_14_fu_419_p1;
reg   [30:0] ti_fu_80;
wire   [0:0] or_ln137_fu_701_p2;
reg   [31:0] retval_2_fu_84;
wire   [31:0] select_ln298_fu_710_p3;
wire   [31:0] ti_cast_fu_322_p1;
wire   [16:0] trunc_ln288_fu_337_p1;
wire   [16:0] add_ln288_fu_341_p2;
wire   [23:0] p2_x_V_fu_405_p3;
wire  signed [24:0] ret_V_31_fu_432_p2;
wire  signed [24:0] ret_V_19_fu_441_p2;
wire   [23:0] p_y_V_4_fu_412_p3;
wire  signed [24:0] ret_V_32_fu_464_p2;
wire  signed [24:0] ret_V_20_fu_470_p2;
wire   [45:0] mul_ln1348_fu_454_p2;
wire   [45:0] mul_ln1348_5_fu_483_p2;
wire   [45:0] ret_V_fu_489_p2;
wire   [23:0] p3_x_V_fu_505_p3;
wire  signed [24:0] sext_ln1348_14_fu_519_p1;
wire  signed [24:0] ret_V_33_fu_523_p2;
wire  signed [24:0] ret_V_22_fu_528_p2;
wire   [23:0] p_y_V_5_fu_512_p3;
wire  signed [24:0] sext_ln1348_15_fu_546_p1;
wire  signed [24:0] ret_V_34_fu_550_p2;
wire  signed [24:0] ret_V_24_fu_555_p2;
wire   [45:0] mul_ln1348_6_fu_540_p2;
wire   [45:0] mul_ln1348_7_fu_567_p2;
wire   [45:0] ret_V_25_fu_573_p2;
wire   [45:0] mul_ln813_fu_615_p2;
wire   [45:0] mul_ln1348_8_fu_627_p2;
wire   [45:0] ret_V_30_fu_633_p2;
wire   [32:0] or_ln134_1_fu_649_p2;
wire   [32:0] cross3_V_fu_639_p4;
wire   [32:0] or_ln134_fu_653_p2;
wire   [0:0] tmp_fu_659_p3;
wire   [0:0] icmp_ln1652_3_fu_678_p2;
wire   [0:0] icmp_ln1652_4_fu_683_p2;
wire   [0:0] and_ln135_fu_689_p2;
wire   [0:0] icmp_ln1652_fu_673_p2;
wire   [0:0] neg_fu_695_p2;
wire   [0:0] pos_fu_667_p2;
wire   [31:0] zext_ln299_fu_707_p1;
reg   [0:0] ap_return_preg;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_return_preg = 1'd0;
end

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U91(
    .din0(ret_V_19_fu_441_p2),
    .din1(ret_V_31_fu_432_p2),
    .dout(mul_ln1348_fu_454_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U92(
    .din0(ret_V_32_fu_464_p2),
    .din1(ret_V_20_fu_470_p2),
    .dout(mul_ln1348_5_fu_483_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U93(
    .din0(ret_V_33_fu_523_p2),
    .din1(ret_V_22_fu_528_p2),
    .dout(mul_ln1348_6_fu_540_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U94(
    .din0(ret_V_34_fu_550_p2),
    .din1(ret_V_24_fu_555_p2),
    .dout(mul_ln1348_7_fu_567_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U95(
    .din0(ret_V_27_reg_933),
    .din1(ret_V_35_reg_928),
    .dout(mul_ln813_fu_615_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U96(
    .din0(ret_V_36_reg_938),
    .din1(ret_V_29_reg_943),
    .dout(mul_ln1348_8_fu_627_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_283_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        UnifiedRetVal_reg_279 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        UnifiedRetVal_reg_279 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        retval_2_fu_84 <= retval_149;
    end else if (((icmp_ln287_reg_769 == 1'd1) & (or_ln137_fu_701_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (face_used_V_load_reg_802 == 1'd1) & (icmp_ln1023_reg_788 == 1'd0))) begin
        retval_2_fu_84 <= select_ln298_fu_710_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ti_fu_80 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ((((icmp_ln287_reg_769 == 1'd1) & (face_used_V_load_reg_802 == 1'd0)) | ((icmp_ln287_reg_769 == 1'd1) & (or_ln137_fu_701_p2 == 1'd0))) | ((icmp_ln287_reg_769 == 1'd1) & (icmp_ln1023_reg_788 == 1'd1))))) begin
        ti_fu_80 <= add_ln287_reg_773;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln287_reg_773 <= add_ln287_fu_331_p2;
        icmp_ln287_reg_769 <= icmp_ln287_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (face_used_V_load_reg_802 == 1'd1) & (icmp_ln1023_reg_788 == 1'd0))) begin
        cross1_V_reg_916 <= {{ret_V_fu_489_p2[45:13]}};
        icmp_ln1027_5_reg_878 <= grp_fu_291_p2;
        sext_ln1348_10_reg_894 <= sext_ln1348_10_fu_425_p1;
        sext_ln1348_11_reg_900 <= sext_ln1348_11_fu_429_p1;
        sext_ln1348_12_reg_905 <= sext_ln1348_12_fu_438_p1;
        sext_ln1348_13_reg_910 <= sext_ln1348_13_fu_460_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (face_used_V_load_reg_802 == 1'd1) & (icmp_ln1023_reg_788 == 1'd0))) begin
        cross2_V_reg_922 <= {{ret_V_25_fu_573_p2[45:13]}};
        ret_V_27_reg_933 <= ret_V_27_fu_594_p2;
        ret_V_29_reg_943 <= ret_V_29_fu_604_p2;
        ret_V_35_reg_928 <= ret_V_35_fu_589_p2;
        ret_V_36_reg_938 <= ret_V_36_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (face_used_V_load_reg_802 == 1'd1) & (icmp_ln1023_reg_788 == 1'd0))) begin
        empty_reg_956 <= empty_fu_718_p1;
        retval_2_load_1_reg_948 <= retval_2_fu_84;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1023_reg_788 == 1'd0))) begin
        face_used_V_load_reg_802 <= face_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln1023_reg_788 <= icmp_ln1023_fu_351_p2;
        tri_V_reg_783 <= enhanced_grid_flat_cells_triangles_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (face_used_V_load_reg_802 == 1'd1) & (icmp_ln1023_reg_788 == 1'd0))) begin
        icmp_ln1027_4_reg_862 <= grp_fu_291_p2;
        p1_x_V_reg_852 <= p1_x_V_fu_385_p3;
        p_y_V_reg_857 <= p_y_V_fu_392_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (face_used_V_load_reg_802 == 1'd1) & (icmp_ln1023_reg_788 == 1'd0))) begin
        icmp_ln1027_reg_831 <= grp_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln1348_2_cast_reg_762 <= sext_ln1348_2_cast_fu_305_p1;
        sext_ln1348_cast_reg_755 <= sext_ln1348_cast_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1023_fu_351_p2 == 1'd0))) begin
        zext_ln541_reg_792[13 : 0] <= zext_ln541_fu_357_p1[13 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_283_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_283_p4 = UnifiedRetVal_reg_279;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_283_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b1;
    end else begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        face_edge_V_ce0 = 1'b1;
    end else begin
        face_edge_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        face_used_V_ce0 = 1'b1;
    end else begin
        face_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        he_next_V_address0 = zext_ln541_10_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_next_V_address0 = zext_ln541_9_fu_362_p1;
    end else begin
        he_next_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        he_next_V_ce0 = 1'b1;
    end else begin
        he_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        he_tail_V_address0 = zext_ln541_11_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        he_tail_V_address0 = zext_ln541_10_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_tail_V_address0 = zext_ln541_9_fu_362_p1;
    end else begin
        he_tail_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        he_tail_V_ce0 = 1'b1;
    end else begin
        he_tail_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        retval_2_out = retval_2_fu_84;
    end else if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        retval_2_out = retval_2_load_1_reg_948;
    end else begin
        retval_2_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        retval_2_out_ap_vld = 1'b1;
    end else begin
        retval_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln287_reg_769 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        select_ln298_out_ap_vld = 1'b1;
    end else begin
        select_ln298_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vertex_x_V_address0 = zext_ln541_14_fu_419_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        vertex_x_V_address0 = zext_ln541_13_fu_399_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vertex_x_V_address0 = zext_ln541_12_fu_374_p1;
    end else begin
        vertex_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        vertex_x_V_ce0 = 1'b1;
    end else begin
        vertex_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vertex_y_V_address0 = zext_ln541_14_fu_419_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        vertex_y_V_address0 = zext_ln541_13_fu_399_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vertex_y_V_address0 = zext_ln541_12_fu_374_p1;
    end else begin
        vertex_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        vertex_y_V_ce0 = 1'b1;
    end else begin
        vertex_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ((((icmp_ln287_reg_769 == 1'd1) & (face_used_V_load_reg_802 == 1'd0)) | ((icmp_ln287_reg_769 == 1'd1) & (or_ln137_fu_701_p2 == 1'd0))) | ((icmp_ln287_reg_769 == 1'd1) & (icmp_ln1023_reg_788 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln287_reg_769 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln287_fu_331_p2 = (ti_fu_80 + 31'd1);

assign add_ln288_fu_341_p2 = (mul_ln288 + trunc_ln288_fu_337_p1);

assign and_ln135_fu_689_p2 = (icmp_ln1652_4_fu_683_p2 & icmp_ln1652_3_fu_678_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cross3_V_fu_639_p4 = {{ret_V_30_fu_633_p2[45:13]}};

assign empty_fu_718_p1 = select_ln298_fu_710_p3[13:0];

assign enhanced_grid_flat_cells_triangles_V_address0 = zext_ln288_fu_346_p1;

assign face_edge_V_address0 = zext_ln541_reg_792;

assign face_used_V_address0 = zext_ln541_fu_357_p1;

assign grp_fu_291_p2 = ((he_tail_V_q0 < 13'd5003) ? 1'b1 : 1'b0);

assign icmp_ln1023_fu_351_p2 = ((enhanced_grid_flat_cells_triangles_V_q0 == 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln1652_3_fu_678_p2 = (($signed(cross2_V_reg_922) < $signed(33'd1)) ? 1'b1 : 1'b0);

assign icmp_ln1652_4_fu_683_p2 = (($signed(cross3_V_fu_639_p4) < $signed(33'd1)) ? 1'b1 : 1'b0);

assign icmp_ln1652_fu_673_p2 = (($signed(cross1_V_reg_916) < $signed(33'd1)) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_326_p2 = (($signed(ti_cast_fu_322_p1) < $signed(enhanced_grid_flat_cells_triangle_count_load)) ? 1'b1 : 1'b0);

assign neg_fu_695_p2 = (icmp_ln1652_fu_673_p2 & and_ln135_fu_689_p2);

assign or_ln134_1_fu_649_p2 = (cross2_V_reg_922 | cross1_V_reg_916);

assign or_ln134_fu_653_p2 = (or_ln134_1_fu_649_p2 | cross3_V_fu_639_p4);

assign or_ln137_fu_701_p2 = (pos_fu_667_p2 | neg_fu_695_p2);

assign p1_x_V_fu_385_p3 = ((icmp_ln1027_reg_831[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p2_x_V_fu_405_p3 = ((icmp_ln1027_4_reg_862[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p3_x_V_fu_505_p3 = ((icmp_ln1027_5_reg_878[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p_y_V_4_fu_412_p3 = ((icmp_ln1027_4_reg_862[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign p_y_V_5_fu_512_p3 = ((icmp_ln1027_5_reg_878[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign p_y_V_fu_392_p3 = ((icmp_ln1027_reg_831[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign pos_fu_667_p2 = (tmp_fu_659_p3 ^ 1'd1);

assign ret_V_19_fu_441_p2 = ($signed(sext_ln1348_2_cast_reg_762) - $signed(sext_ln1348_12_fu_438_p1));

assign ret_V_20_fu_470_p2 = ($signed(sext_ln1348_cast_reg_755) - $signed(sext_ln1348_11_fu_429_p1));

assign ret_V_22_fu_528_p2 = ($signed(sext_ln1348_2_cast_reg_762) - $signed(sext_ln1348_13_reg_910));

assign ret_V_24_fu_555_p2 = ($signed(sext_ln1348_cast_reg_755) - $signed(sext_ln1348_10_reg_894));

assign ret_V_25_fu_573_p2 = (mul_ln1348_6_fu_540_p2 - mul_ln1348_7_fu_567_p2);

assign ret_V_27_fu_594_p2 = ($signed(sext_ln1348_2_cast_reg_762) - $signed(sext_ln1348_15_fu_546_p1));

assign ret_V_29_fu_604_p2 = ($signed(sext_ln1348_cast_reg_755) - $signed(sext_ln1348_14_fu_519_p1));

assign ret_V_30_fu_633_p2 = (mul_ln813_fu_615_p2 - mul_ln1348_8_fu_627_p2);

assign ret_V_31_fu_432_p2 = ($signed(sext_ln1348_10_fu_425_p1) - $signed(sext_ln1348_11_fu_429_p1));

assign ret_V_32_fu_464_p2 = ($signed(sext_ln1348_13_fu_460_p1) - $signed(sext_ln1348_12_fu_438_p1));

assign ret_V_33_fu_523_p2 = ($signed(sext_ln1348_14_fu_519_p1) - $signed(sext_ln1348_10_reg_894));

assign ret_V_34_fu_550_p2 = ($signed(sext_ln1348_15_fu_546_p1) - $signed(sext_ln1348_13_reg_910));

assign ret_V_35_fu_589_p2 = ($signed(sext_ln1348_11_reg_900) - $signed(sext_ln1348_14_fu_519_p1));

assign ret_V_36_fu_599_p2 = ($signed(sext_ln1348_12_reg_905) - $signed(sext_ln1348_15_fu_546_p1));

assign ret_V_fu_489_p2 = (mul_ln1348_fu_454_p2 - mul_ln1348_5_fu_483_p2);

assign select_ln298_fu_710_p3 = ((or_ln137_fu_701_p2[0:0] == 1'b1) ? zext_ln299_fu_707_p1 : retval_2_fu_84);

assign select_ln298_out = empty_reg_956;

assign sext_ln1348_10_fu_425_p1 = $signed(p2_x_V_fu_405_p3);

assign sext_ln1348_11_fu_429_p1 = $signed(p1_x_V_reg_852);

assign sext_ln1348_12_fu_438_p1 = $signed(p_y_V_reg_857);

assign sext_ln1348_13_fu_460_p1 = $signed(p_y_V_4_fu_412_p3);

assign sext_ln1348_14_fu_519_p1 = $signed(p3_x_V_fu_505_p3);

assign sext_ln1348_15_fu_546_p1 = $signed(p_y_V_5_fu_512_p3);

assign sext_ln1348_2_cast_fu_305_p1 = $signed(sext_ln1348_2);

assign sext_ln1348_cast_fu_301_p1 = $signed(sext_ln1348);

assign ti_cast_fu_322_p1 = ti_fu_80;

assign tmp_fu_659_p3 = or_ln134_fu_653_p2[32'd32];

assign trunc_ln288_fu_337_p1 = ti_fu_80[16:0];

assign zext_ln288_fu_346_p1 = add_ln288_fu_341_p2;

assign zext_ln299_fu_707_p1 = tri_V_reg_783;

assign zext_ln541_10_fu_368_p1 = he_next_V_q0;

assign zext_ln541_11_fu_380_p1 = he_next_V_q0;

assign zext_ln541_12_fu_374_p1 = he_tail_V_q0;

assign zext_ln541_13_fu_399_p1 = he_tail_V_q0;

assign zext_ln541_14_fu_419_p1 = he_tail_V_q0;

assign zext_ln541_9_fu_362_p1 = face_edge_V_q0;

assign zext_ln541_fu_357_p1 = enhanced_grid_flat_cells_triangles_V_q0;

always @ (posedge ap_clk) begin
    zext_ln541_reg_792[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //tri2d_locateTriangleSimple_Pipeline_VITIS_LOOP_287_3
