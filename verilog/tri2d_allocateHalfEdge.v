// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_allocateHalfEdge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        newEdgeIdx_V_read,
        freeEdgeCount_i,
        freeEdgeCount_o,
        freeEdgeCount_o_ap_vld,
        freeEdges_V_address0,
        freeEdges_V_ce0,
        freeEdges_V_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] newEdgeIdx_V_read;
input  [31:0] freeEdgeCount_i;
output  [31:0] freeEdgeCount_o;
output   freeEdgeCount_o_ap_vld;
output  [8:0] freeEdges_V_address0;
output   freeEdges_V_ce0;
input  [14:0] freeEdges_V_q0;
output  [14:0] ap_return_0;
output  [14:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] freeEdgeCount_o;
reg freeEdgeCount_o_ap_vld;
reg freeEdges_V_ce0;
reg[14:0] ap_return_0;
reg[14:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln443_fu_64_p2;
reg   [0:0] icmp_ln443_reg_115;
wire   [14:0] add_ln840_fu_70_p2;
reg   [14:0] ap_phi_mux_newEdgeIdx_0_phi_fu_40_p4;
reg   [14:0] newEdgeIdx_0_reg_37;
wire    ap_CS_fsm_state2;
reg   [14:0] ap_phi_mux_agg_result_0_phi_fu_49_p4;
reg   [14:0] agg_result_0_reg_46;
wire   [63:0] zext_ln444_fu_92_p1;
wire   [31:0] zext_ln444_8_fu_82_p1;
wire   [30:0] trunc_ln443_fu_60_p1;
wire   [30:0] add_ln444_fu_76_p2;
reg   [14:0] ap_return_0_preg;
reg   [14:0] ap_return_1_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_0_preg = 15'd0;
#0 ap_return_1_preg = 15'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 15'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_0_preg <= ap_phi_mux_agg_result_0_phi_fu_49_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 15'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= ap_phi_mux_newEdgeIdx_0_phi_fu_40_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln443_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        agg_result_0_reg_46 <= newEdgeIdx_V_read;
    end else if (((icmp_ln443_reg_115 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_0_reg_46 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln443_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        newEdgeIdx_0_reg_37 <= add_ln840_fu_70_p2;
    end else if (((icmp_ln443_reg_115 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        newEdgeIdx_0_reg_37 <= newEdgeIdx_V_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln443_reg_115 <= icmp_ln443_fu_64_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_115 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_agg_result_0_phi_fu_49_p4 = freeEdges_V_q0;
    end else begin
        ap_phi_mux_agg_result_0_phi_fu_49_p4 = agg_result_0_reg_46;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_115 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_newEdgeIdx_0_phi_fu_40_p4 = newEdgeIdx_V_read;
    end else begin
        ap_phi_mux_newEdgeIdx_0_phi_fu_40_p4 = newEdgeIdx_0_reg_37;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = ap_phi_mux_agg_result_0_phi_fu_49_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = ap_phi_mux_newEdgeIdx_0_phi_fu_40_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        freeEdgeCount_o = zext_ln444_8_fu_82_p1;
    end else begin
        freeEdgeCount_o = freeEdgeCount_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln443_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        freeEdgeCount_o_ap_vld = 1'b1;
    end else begin
        freeEdgeCount_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        freeEdges_V_ce0 = 1'b1;
    end else begin
        freeEdges_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln444_fu_76_p2 = ($signed(trunc_ln443_fu_60_p1) + $signed(31'd2147483647));

assign add_ln840_fu_70_p2 = (newEdgeIdx_V_read + 15'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign freeEdges_V_address0 = zext_ln444_fu_92_p1;

assign icmp_ln443_fu_64_p2 = (($signed(freeEdgeCount_i) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign trunc_ln443_fu_60_p1 = freeEdgeCount_i[30:0];

assign zext_ln444_8_fu_82_p1 = add_ln444_fu_76_p2;

assign zext_ln444_fu_92_p1 = add_ln444_fu_76_p2;

endmodule //tri2d_allocateHalfEdge
