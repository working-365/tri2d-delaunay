// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_compactTriangleIndices_Pipeline_VITIS_LOOP_490_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        global_edge_idx_V_load,
        tri_num_V_load,
        index_map_V_address0,
        index_map_V_ce0,
        index_map_V_q0,
        he_used_V_address0,
        he_used_V_ce0,
        he_used_V_q0,
        he_face_V_address0,
        he_face_V_ce0,
        he_face_V_we0,
        he_face_V_d0,
        he_face_V_address1,
        he_face_V_ce1,
        he_face_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] global_edge_idx_V_load;
input  [13:0] tri_num_V_load;
output  [13:0] index_map_V_address0;
output   index_map_V_ce0;
input  [13:0] index_map_V_q0;
output  [15:0] he_used_V_address0;
output   he_used_V_ce0;
input  [0:0] he_used_V_q0;
output  [15:0] he_face_V_address0;
output   he_face_V_ce0;
output   he_face_V_we0;
output  [13:0] he_face_V_d0;
output  [15:0] he_face_V_address1;
output   he_face_V_ce1;
input  [13:0] he_face_V_q1;

reg ap_idle;
reg index_map_V_ce0;
reg he_used_V_ce0;
reg he_face_V_ce0;
reg he_face_V_we0;
reg he_face_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] he_idx_V_cast_fu_119_p1;
reg   [63:0] he_idx_V_cast_reg_181;
reg   [0:0] he_used_V_load_reg_191;
reg   [0:0] he_used_V_load_reg_191_pp0_iter2_reg;
reg   [15:0] he_face_V_addr_reg_195;
reg   [15:0] he_face_V_addr_reg_195_pp0_iter2_reg;
wire   [0:0] icmp_ln1023_fu_129_p2;
reg   [0:0] icmp_ln1023_reg_201;
wire   [0:0] icmp_ln1027_6_fu_135_p2;
reg   [0:0] icmp_ln1027_6_reg_205;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln541_fu_140_p1;
reg   [14:0] he_idx_V_fu_40;
wire   [14:0] add_ln840_fu_113_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_he_idx_V_1;
wire   [0:0] icmp_ln1023_2_fu_145_p2;
wire   [0:0] and_ln1023_fu_151_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tri2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            he_idx_V_fu_40 <= add_ln840_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            he_idx_V_fu_40 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        he_used_V_load_reg_191 <= he_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((he_used_V_q0 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        he_face_V_addr_reg_195[14 : 0] <= he_idx_V_cast_reg_181[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        he_face_V_addr_reg_195_pp0_iter2_reg[14 : 0] <= he_face_V_addr_reg_195[14 : 0];
        he_used_V_load_reg_191_pp0_iter2_reg <= he_used_V_load_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        he_idx_V_cast_reg_181[14 : 0] <= he_idx_V_cast_fu_119_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((he_used_V_load_reg_191 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1023_reg_201 <= icmp_ln1023_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((he_used_V_load_reg_191 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1023_fu_129_p2 == 1'd0))) begin
        icmp_ln1027_6_reg_205 <= icmp_ln1027_6_fu_135_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_he_idx_V_1 = 15'd0;
    end else begin
        ap_sig_allocacmp_he_idx_V_1 = he_idx_V_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        he_face_V_ce0 = 1'b1;
    end else begin
        he_face_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        he_face_V_ce1 = 1'b1;
    end else begin
        he_face_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((he_used_V_load_reg_191_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1023_reg_201 == 1'd0))) begin
        he_face_V_we0 = 1'b1;
    end else begin
        he_face_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        he_used_V_ce0 = 1'b1;
    end else begin
        he_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        index_map_V_ce0 = 1'b1;
    end else begin
        index_map_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln840_fu_113_p2 = (ap_sig_allocacmp_he_idx_V_1 + 15'd1);

assign and_ln1023_fu_151_p2 = (icmp_ln1027_6_reg_205 & icmp_ln1023_2_fu_145_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign he_face_V_address0 = he_face_V_addr_reg_195_pp0_iter2_reg;

assign he_face_V_address1 = he_idx_V_cast_reg_181;

assign he_face_V_d0 = ((and_ln1023_fu_151_p2[0:0] == 1'b1) ? index_map_V_q0 : 14'd16383);

assign he_idx_V_cast_fu_119_p1 = ap_sig_allocacmp_he_idx_V_1;

assign he_used_V_address0 = he_idx_V_cast_fu_119_p1;

assign icmp_ln1023_2_fu_145_p2 = ((index_map_V_q0 != 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln1023_fu_129_p2 = ((he_face_V_q1 == 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln1027_6_fu_135_p2 = ((he_face_V_q1 < tri_num_V_load) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_107_p2 = ((ap_sig_allocacmp_he_idx_V_1 == global_edge_idx_V_load) ? 1'b1 : 1'b0);

assign index_map_V_address0 = zext_ln541_fu_140_p1;

assign zext_ln541_fu_140_p1 = he_face_V_q1;

always @ (posedge ap_clk) begin
    he_idx_V_cast_reg_181[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    he_face_V_addr_reg_195[15] <= 1'b0;
    he_face_V_addr_reg_195_pp0_iter2_reg[15] <= 1'b0;
end

endmodule //tri2d_compactTriangleIndices_Pipeline_VITIS_LOOP_490_4
