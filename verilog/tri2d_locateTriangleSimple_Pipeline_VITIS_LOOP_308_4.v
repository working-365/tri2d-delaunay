// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_locateTriangleSimple_Pipeline_VITIS_LOOP_308_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        retval_149,
        triangleCount,
        sext_ln1348_2,
        sext_ln1348,
        select_ln317_cast_out,
        select_ln317_cast_out_ap_vld,
        face_used_V_address0,
        face_used_V_ce0,
        face_used_V_q0,
        face_edge_V_address0,
        face_edge_V_ce0,
        face_edge_V_q0,
        he_tail_V_address0,
        he_tail_V_ce0,
        he_tail_V_q0,
        he_next_V_address0,
        he_next_V_ce0,
        he_next_V_q0,
        vertex_x_V_address0,
        vertex_x_V_ce0,
        vertex_x_V_q0,
        vertex_y_V_address0,
        vertex_y_V_ce0,
        vertex_y_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] retval_149;
input  [13:0] triangleCount;
input  [23:0] sext_ln1348_2;
input  [23:0] sext_ln1348;
output  [13:0] select_ln317_cast_out;
output   select_ln317_cast_out_ap_vld;
output  [13:0] face_used_V_address0;
output   face_used_V_ce0;
input  [0:0] face_used_V_q0;
output  [13:0] face_edge_V_address0;
output   face_edge_V_ce0;
input  [14:0] face_edge_V_q0;
output  [15:0] he_tail_V_address0;
output   he_tail_V_ce0;
input  [12:0] he_tail_V_q0;
output  [15:0] he_next_V_address0;
output   he_next_V_ce0;
input  [14:0] he_next_V_q0;
output  [12:0] vertex_x_V_address0;
output   vertex_x_V_ce0;
input  [23:0] vertex_x_V_q0;
output  [12:0] vertex_y_V_address0;
output   vertex_y_V_ce0;
input  [23:0] vertex_y_V_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg select_ln317_cast_out_ap_vld;
reg face_used_V_ce0;
reg face_edge_V_ce0;
reg[15:0] he_tail_V_address0;
reg he_tail_V_ce0;
reg[15:0] he_next_V_address0;
reg he_next_V_ce0;
reg[12:0] vertex_x_V_address0;
reg vertex_x_V_ce0;
reg[12:0] vertex_y_V_address0;
reg vertex_y_V_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [24:0] sext_ln1348_cast_fu_261_p1;
reg  signed [24:0] sext_ln1348_cast_reg_688;
wire  signed [24:0] sext_ln1348_2_cast_fu_265_p1;
reg  signed [24:0] sext_ln1348_2_cast_reg_695;
reg   [13:0] tri_V_1_reg_702;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1027_fu_282_p2;
reg   [0:0] icmp_ln1027_reg_707;
wire   [13:0] tri_V_fu_287_p2;
reg   [13:0] tri_V_reg_711;
wire   [63:0] zext_ln541_fu_293_p1;
reg   [63:0] zext_ln541_reg_716;
wire   [31:0] zext_ln1027_fu_298_p1;
reg   [31:0] zext_ln1027_reg_726;
wire    ap_CS_fsm_state3;
reg   [0:0] face_used_V_load_reg_731;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] grp_fu_255_p2;
reg   [0:0] icmp_ln1027_1_reg_760;
wire    ap_CS_fsm_state6;
wire   [23:0] p1_x_V_fu_324_p3;
reg   [23:0] p1_x_V_reg_781;
wire   [23:0] p_y_V_fu_331_p3;
reg   [23:0] p_y_V_reg_786;
reg   [0:0] icmp_ln1027_2_reg_791;
reg   [0:0] icmp_ln1027_3_reg_807;
wire    ap_CS_fsm_state7;
wire  signed [24:0] sext_ln1348_1_fu_364_p1;
reg  signed [24:0] sext_ln1348_1_reg_823;
wire  signed [24:0] sext_ln1348_3_fu_368_p1;
reg  signed [24:0] sext_ln1348_3_reg_829;
wire  signed [24:0] sext_ln1348_4_fu_377_p1;
reg  signed [24:0] sext_ln1348_4_reg_834;
wire  signed [24:0] sext_ln1348_7_fu_399_p1;
reg  signed [24:0] sext_ln1348_7_reg_839;
reg   [32:0] cross1_V_reg_845;
reg   [32:0] cross2_V_reg_851;
wire    ap_CS_fsm_state8;
wire   [24:0] ret_V_17_fu_528_p2;
reg  signed [24:0] ret_V_17_reg_857;
wire   [24:0] ret_V_9_fu_533_p2;
reg  signed [24:0] ret_V_9_reg_862;
wire   [24:0] ret_V_18_fu_538_p2;
reg  signed [24:0] ret_V_18_reg_867;
wire   [24:0] ret_V_11_fu_543_p2;
reg  signed [24:0] ret_V_11_reg_872;
wire   [13:0] empty_fu_656_p1;
reg   [13:0] empty_reg_880;
wire    ap_CS_fsm_state9;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_247_p4;
reg   [0:0] UnifiedRetVal_reg_243;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln541_3_fu_301_p1;
wire   [63:0] zext_ln541_4_fu_307_p1;
wire   [63:0] zext_ln541_6_fu_313_p1;
wire   [63:0] zext_ln541_5_fu_319_p1;
wire   [63:0] zext_ln541_7_fu_338_p1;
wire   [63:0] zext_ln541_8_fu_358_p1;
reg   [13:0] faceIdx_V_fu_70;
wire   [0:0] or_ln137_fu_643_p2;
reg   [31:0] retval_1147_fu_74;
wire   [31:0] select_ln317_fu_649_p3;
wire   [23:0] p2_x_V_fu_344_p3;
wire  signed [24:0] ret_V_13_fu_371_p2;
wire  signed [24:0] ret_V_1_fu_380_p2;
wire   [23:0] p_y_V_2_fu_351_p3;
wire  signed [24:0] ret_V_14_fu_403_p2;
wire  signed [24:0] ret_V_2_fu_409_p2;
wire   [45:0] mul_ln1348_fu_393_p2;
wire   [45:0] mul_ln1348_1_fu_422_p2;
wire   [45:0] ret_V_fu_428_p2;
wire   [23:0] p3_x_V_fu_444_p3;
wire  signed [24:0] sext_ln1348_8_fu_458_p1;
wire  signed [24:0] ret_V_15_fu_462_p2;
wire  signed [24:0] ret_V_4_fu_467_p2;
wire   [23:0] p_y_V_3_fu_451_p3;
wire  signed [24:0] sext_ln1348_9_fu_485_p1;
wire  signed [24:0] ret_V_16_fu_489_p2;
wire  signed [24:0] ret_V_6_fu_494_p2;
wire   [45:0] mul_ln1348_2_fu_479_p2;
wire   [45:0] mul_ln1348_3_fu_506_p2;
wire   [45:0] ret_V_7_fu_512_p2;
wire   [45:0] mul_ln813_fu_557_p2;
wire   [45:0] mul_ln1348_4_fu_569_p2;
wire   [45:0] ret_V_12_fu_575_p2;
wire   [32:0] or_ln134_fu_591_p2;
wire   [32:0] cross3_V_fu_581_p4;
wire   [32:0] or_ln134_1_fu_595_p2;
wire   [0:0] tmp_fu_601_p3;
wire   [0:0] icmp_ln1652_1_fu_620_p2;
wire   [0:0] icmp_ln1652_2_fu_625_p2;
wire   [0:0] and_ln135_fu_631_p2;
wire   [0:0] icmp_ln1652_fu_615_p2;
wire   [0:0] neg_fu_637_p2;
wire   [0:0] pos_fu_609_p2;
reg   [0:0] ap_return_preg;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_return_preg = 1'd0;
end

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U112(
    .din0(ret_V_1_fu_380_p2),
    .din1(ret_V_13_fu_371_p2),
    .dout(mul_ln1348_fu_393_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U113(
    .din0(ret_V_14_fu_403_p2),
    .din1(ret_V_2_fu_409_p2),
    .dout(mul_ln1348_1_fu_422_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U114(
    .din0(ret_V_15_fu_462_p2),
    .din1(ret_V_4_fu_467_p2),
    .dout(mul_ln1348_2_fu_479_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U115(
    .din0(ret_V_16_fu_489_p2),
    .din1(ret_V_6_fu_494_p2),
    .dout(mul_ln1348_3_fu_506_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U116(
    .din0(ret_V_9_reg_862),
    .din1(ret_V_17_reg_857),
    .dout(mul_ln813_fu_557_p2)
);

tri2d_mul_25s_25s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 46 ))
mul_25s_25s_46_1_1_U117(
    .din0(ret_V_18_reg_867),
    .din1(ret_V_11_reg_872),
    .dout(mul_ln1348_4_fu_569_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_247_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        UnifiedRetVal_reg_243 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_243 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        faceIdx_V_fu_70 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (((icmp_ln1027_reg_707 == 1'd1) & (face_used_V_load_reg_731 == 1'd0)) | ((icmp_ln1027_reg_707 == 1'd1) & (or_ln137_fu_643_p2 == 1'd0))))) begin
        faceIdx_V_fu_70 <= tri_V_reg_711;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        retval_1147_fu_74 <= retval_149;
    end else if (((icmp_ln1027_reg_707 == 1'd1) & (or_ln137_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (face_used_V_load_reg_731 == 1'd1))) begin
        retval_1147_fu_74 <= select_ln317_fu_649_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (face_used_V_load_reg_731 == 1'd1))) begin
        cross1_V_reg_845 <= {{ret_V_fu_428_p2[45:13]}};
        icmp_ln1027_3_reg_807 <= grp_fu_255_p2;
        sext_ln1348_1_reg_823 <= sext_ln1348_1_fu_364_p1;
        sext_ln1348_3_reg_829 <= sext_ln1348_3_fu_368_p1;
        sext_ln1348_4_reg_834 <= sext_ln1348_4_fu_377_p1;
        sext_ln1348_7_reg_839 <= sext_ln1348_7_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (face_used_V_load_reg_731 == 1'd1))) begin
        cross2_V_reg_851 <= {{ret_V_7_fu_512_p2[45:13]}};
        ret_V_11_reg_872 <= ret_V_11_fu_543_p2;
        ret_V_17_reg_857 <= ret_V_17_fu_528_p2;
        ret_V_18_reg_867 <= ret_V_18_fu_538_p2;
        ret_V_9_reg_862 <= ret_V_9_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (face_used_V_load_reg_731 == 1'd1))) begin
        empty_reg_880 <= empty_fu_656_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        face_used_V_load_reg_731 <= face_used_V_q0;
        zext_ln1027_reg_726[13 : 0] <= zext_ln1027_fu_298_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (face_used_V_load_reg_731 == 1'd1))) begin
        icmp_ln1027_1_reg_760 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (face_used_V_load_reg_731 == 1'd1))) begin
        icmp_ln1027_2_reg_791 <= grp_fu_255_p2;
        p1_x_V_reg_781 <= p1_x_V_fu_324_p3;
        p_y_V_reg_786 <= p_y_V_fu_331_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1027_reg_707 <= icmp_ln1027_fu_282_p2;
        tri_V_1_reg_702 <= faceIdx_V_fu_70;
        tri_V_reg_711 <= tri_V_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln1348_2_cast_reg_695 <= sext_ln1348_2_cast_fu_265_p1;
        sext_ln1348_cast_reg_688 <= sext_ln1348_cast_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln541_reg_716[13 : 0] <= zext_ln541_fu_293_p1[13 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_247_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_247_p4 = UnifiedRetVal_reg_243;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_247_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        face_edge_V_ce0 = 1'b1;
    end else begin
        face_edge_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        face_used_V_ce0 = 1'b1;
    end else begin
        face_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        he_next_V_address0 = zext_ln541_4_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        he_next_V_address0 = zext_ln541_3_fu_301_p1;
    end else begin
        he_next_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        he_next_V_ce0 = 1'b1;
    end else begin
        he_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        he_tail_V_address0 = zext_ln541_5_fu_319_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_tail_V_address0 = zext_ln541_4_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        he_tail_V_address0 = zext_ln541_3_fu_301_p1;
    end else begin
        he_tail_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        he_tail_V_ce0 = 1'b1;
    end else begin
        he_tail_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        select_ln317_cast_out_ap_vld = 1'b1;
    end else begin
        select_ln317_cast_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        vertex_x_V_address0 = zext_ln541_8_fu_358_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vertex_x_V_address0 = zext_ln541_7_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vertex_x_V_address0 = zext_ln541_6_fu_313_p1;
    end else begin
        vertex_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        vertex_x_V_ce0 = 1'b1;
    end else begin
        vertex_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        vertex_y_V_address0 = zext_ln541_8_fu_358_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vertex_y_V_address0 = zext_ln541_7_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vertex_y_V_address0 = zext_ln541_6_fu_313_p1;
    end else begin
        vertex_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        vertex_y_V_ce0 = 1'b1;
    end else begin
        vertex_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (((icmp_ln1027_reg_707 == 1'd1) & (face_used_V_load_reg_731 == 1'd0)) | ((icmp_ln1027_reg_707 == 1'd1) & (or_ln137_fu_643_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln1027_reg_707 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln135_fu_631_p2 = (icmp_ln1652_2_fu_625_p2 & icmp_ln1652_1_fu_620_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cross3_V_fu_581_p4 = {{ret_V_12_fu_575_p2[45:13]}};

assign empty_fu_656_p1 = select_ln317_fu_649_p3[13:0];

assign face_edge_V_address0 = zext_ln541_reg_716;

assign face_used_V_address0 = zext_ln541_fu_293_p1;

assign grp_fu_255_p2 = ((he_tail_V_q0 < 13'd5003) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_282_p2 = ((faceIdx_V_fu_70 < triangleCount) ? 1'b1 : 1'b0);

assign icmp_ln1652_1_fu_620_p2 = (($signed(cross2_V_reg_851) < $signed(33'd1)) ? 1'b1 : 1'b0);

assign icmp_ln1652_2_fu_625_p2 = (($signed(cross3_V_fu_581_p4) < $signed(33'd1)) ? 1'b1 : 1'b0);

assign icmp_ln1652_fu_615_p2 = (($signed(cross1_V_reg_845) < $signed(33'd1)) ? 1'b1 : 1'b0);

assign neg_fu_637_p2 = (icmp_ln1652_fu_615_p2 & and_ln135_fu_631_p2);

assign or_ln134_1_fu_595_p2 = (or_ln134_fu_591_p2 | cross3_V_fu_581_p4);

assign or_ln134_fu_591_p2 = (cross2_V_reg_851 | cross1_V_reg_845);

assign or_ln137_fu_643_p2 = (pos_fu_609_p2 | neg_fu_637_p2);

assign p1_x_V_fu_324_p3 = ((icmp_ln1027_1_reg_760[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p2_x_V_fu_344_p3 = ((icmp_ln1027_2_reg_791[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p3_x_V_fu_444_p3 = ((icmp_ln1027_3_reg_807[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p_y_V_2_fu_351_p3 = ((icmp_ln1027_2_reg_791[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign p_y_V_3_fu_451_p3 = ((icmp_ln1027_3_reg_807[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign p_y_V_fu_331_p3 = ((icmp_ln1027_1_reg_760[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign pos_fu_609_p2 = (tmp_fu_601_p3 ^ 1'd1);

assign ret_V_11_fu_543_p2 = ($signed(sext_ln1348_cast_reg_688) - $signed(sext_ln1348_8_fu_458_p1));

assign ret_V_12_fu_575_p2 = (mul_ln813_fu_557_p2 - mul_ln1348_4_fu_569_p2);

assign ret_V_13_fu_371_p2 = ($signed(sext_ln1348_1_fu_364_p1) - $signed(sext_ln1348_3_fu_368_p1));

assign ret_V_14_fu_403_p2 = ($signed(sext_ln1348_7_fu_399_p1) - $signed(sext_ln1348_4_fu_377_p1));

assign ret_V_15_fu_462_p2 = ($signed(sext_ln1348_8_fu_458_p1) - $signed(sext_ln1348_1_reg_823));

assign ret_V_16_fu_489_p2 = ($signed(sext_ln1348_9_fu_485_p1) - $signed(sext_ln1348_7_reg_839));

assign ret_V_17_fu_528_p2 = ($signed(sext_ln1348_3_reg_829) - $signed(sext_ln1348_8_fu_458_p1));

assign ret_V_18_fu_538_p2 = ($signed(sext_ln1348_4_reg_834) - $signed(sext_ln1348_9_fu_485_p1));

assign ret_V_1_fu_380_p2 = ($signed(sext_ln1348_2_cast_reg_695) - $signed(sext_ln1348_4_fu_377_p1));

assign ret_V_2_fu_409_p2 = ($signed(sext_ln1348_cast_reg_688) - $signed(sext_ln1348_3_fu_368_p1));

assign ret_V_4_fu_467_p2 = ($signed(sext_ln1348_2_cast_reg_695) - $signed(sext_ln1348_7_reg_839));

assign ret_V_6_fu_494_p2 = ($signed(sext_ln1348_cast_reg_688) - $signed(sext_ln1348_1_reg_823));

assign ret_V_7_fu_512_p2 = (mul_ln1348_2_fu_479_p2 - mul_ln1348_3_fu_506_p2);

assign ret_V_9_fu_533_p2 = ($signed(sext_ln1348_2_cast_reg_695) - $signed(sext_ln1348_9_fu_485_p1));

assign ret_V_fu_428_p2 = (mul_ln1348_fu_393_p2 - mul_ln1348_1_fu_422_p2);

assign select_ln317_cast_out = empty_reg_880;

assign select_ln317_fu_649_p3 = ((or_ln137_fu_643_p2[0:0] == 1'b1) ? zext_ln1027_reg_726 : retval_1147_fu_74);

assign sext_ln1348_1_fu_364_p1 = $signed(p2_x_V_fu_344_p3);

assign sext_ln1348_2_cast_fu_265_p1 = $signed(sext_ln1348_2);

assign sext_ln1348_3_fu_368_p1 = $signed(p1_x_V_reg_781);

assign sext_ln1348_4_fu_377_p1 = $signed(p_y_V_reg_786);

assign sext_ln1348_7_fu_399_p1 = $signed(p_y_V_2_fu_351_p3);

assign sext_ln1348_8_fu_458_p1 = $signed(p3_x_V_fu_444_p3);

assign sext_ln1348_9_fu_485_p1 = $signed(p_y_V_3_fu_451_p3);

assign sext_ln1348_cast_fu_261_p1 = $signed(sext_ln1348);

assign tmp_fu_601_p3 = or_ln134_1_fu_595_p2[32'd32];

assign tri_V_fu_287_p2 = (faceIdx_V_fu_70 + 14'd1);

assign zext_ln1027_fu_298_p1 = tri_V_1_reg_702;

assign zext_ln541_3_fu_301_p1 = face_edge_V_q0;

assign zext_ln541_4_fu_307_p1 = he_next_V_q0;

assign zext_ln541_5_fu_319_p1 = he_next_V_q0;

assign zext_ln541_6_fu_313_p1 = he_tail_V_q0;

assign zext_ln541_7_fu_338_p1 = he_tail_V_q0;

assign zext_ln541_8_fu_358_p1 = he_tail_V_q0;

assign zext_ln541_fu_293_p1 = faceIdx_V_fu_70;

always @ (posedge ap_clk) begin
    zext_ln541_reg_716[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_726[31:14] <= 18'b000000000000000000;
end

endmodule //tri2d_locateTriangleSimple_Pipeline_VITIS_LOOP_308_4
