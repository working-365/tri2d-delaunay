// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_assignTriangleToGrid_Pipeline_VITIS_LOOP_248_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        enhanced_grid_flat_cells_triangle_count_load,
        mul_ln242,
        add_ln249_out,
        add_ln249_out_ap_vld,
        enhanced_grid_flat_cells_triangles_V_address0,
        enhanced_grid_flat_cells_triangles_V_ce0,
        enhanced_grid_flat_cells_triangles_V_q0,
        face_used_V_address0,
        face_used_V_ce0,
        face_used_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] enhanced_grid_flat_cells_triangle_count_load;
input  [16:0] mul_ln242;
output  [16:0] add_ln249_out;
output   add_ln249_out_ap_vld;
output  [16:0] enhanced_grid_flat_cells_triangles_V_address0;
output   enhanced_grid_flat_cells_triangles_V_ce0;
input  [13:0] enhanced_grid_flat_cells_triangles_V_q0;
output  [13:0] face_used_V_address0;
output   face_used_V_ce0;
input  [0:0] face_used_V_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg add_ln249_out_ap_vld;
reg enhanced_grid_flat_cells_triangles_V_ce0;
reg face_used_V_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln248_fu_109_p2;
reg   [0:0] icmp_ln248_reg_160;
wire    ap_CS_fsm_state2;
wire   [30:0] add_ln248_fu_114_p2;
reg   [30:0] add_ln248_reg_164;
wire   [16:0] add_ln249_fu_124_p2;
reg   [16:0] add_ln249_reg_169;
wire    ap_CS_fsm_state3;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_93_p4;
reg   [0:0] UnifiedRetVal_reg_89;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln249_fu_129_p1;
wire   [63:0] zext_ln541_fu_134_p1;
reg   [30:0] i_fu_40;
wire    ap_CS_fsm_state4;
wire   [16:0] trunc_ln249_fu_120_p1;
reg   [0:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_93_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_reg_160 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_89 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_89 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_40 <= 31'd0;
    end else if (((icmp_ln248_reg_160 == 1'd1) & (face_used_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_40 <= add_ln248_reg_164;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln248_reg_164 <= add_ln248_fu_114_p2;
        icmp_ln248_reg_160 <= icmp_ln248_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln249_reg_169 <= add_ln249_fu_124_p2;
    end
end

always @ (*) begin
    if (((icmp_ln248_reg_160 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln249_out_ap_vld = 1'b1;
    end else begin
        add_ln249_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln248_reg_160 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_93_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_93_p4 = UnifiedRetVal_reg_89;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_93_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b1;
    end else begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        face_used_V_ce0 = 1'b1;
    end else begin
        face_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln248_reg_160 == 1'd1) & (face_used_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln248_reg_160 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln248_fu_114_p2 = (i_fu_40 + 31'd1);

assign add_ln249_fu_124_p2 = (mul_ln242 + trunc_ln249_fu_120_p1);

assign add_ln249_out = add_ln249_reg_169;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign enhanced_grid_flat_cells_triangles_V_address0 = zext_ln249_fu_129_p1;

assign face_used_V_address0 = zext_ln541_fu_134_p1;

assign icmp_ln248_fu_109_p2 = ((i_fu_40 < enhanced_grid_flat_cells_triangle_count_load) ? 1'b1 : 1'b0);

assign trunc_ln249_fu_120_p1 = i_fu_40[16:0];

assign zext_ln249_fu_129_p1 = add_ln249_fu_124_p2;

assign zext_ln541_fu_134_p1 = enhanced_grid_flat_cells_triangles_V_q0;

endmodule //tri2d_assignTriangleToGrid_Pipeline_VITIS_LOOP_248_1
