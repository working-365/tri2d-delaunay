// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_tri2d_Pipeline_VITIS_LOOP_890_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_in_stream_TVALID,
        x_in_stream_TDATA,
        x_in_stream_TREADY,
        x_in_stream_TKEEP,
        x_in_stream_TSTRB,
        x_in_stream_TUSER,
        x_in_stream_TLAST,
        x_in_stream_TID,
        x_in_stream_TDEST,
        vertex_x_V_address0,
        vertex_x_V_ce0,
        vertex_x_V_we0,
        vertex_x_V_d0,
        vertex_y_V_address0,
        vertex_y_V_ce0,
        vertex_y_V_we0,
        vertex_y_V_d0,
        vertex_used_V_address0,
        vertex_used_V_ce0,
        vertex_used_V_we0,
        vertex_used_V_d0,
        grp_fu_1099_p_din0,
        grp_fu_1099_p_dout0,
        grp_fu_1099_p_ce,
        grp_fu_1102_p_din0,
        grp_fu_1102_p_dout0,
        grp_fu_1102_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_in_stream_TVALID;
input  [63:0] x_in_stream_TDATA;
output   x_in_stream_TREADY;
input  [7:0] x_in_stream_TKEEP;
input  [7:0] x_in_stream_TSTRB;
input  [15:0] x_in_stream_TUSER;
input  [0:0] x_in_stream_TLAST;
input  [4:0] x_in_stream_TID;
input  [5:0] x_in_stream_TDEST;
output  [12:0] vertex_x_V_address0;
output   vertex_x_V_ce0;
output   vertex_x_V_we0;
output  [23:0] vertex_x_V_d0;
output  [12:0] vertex_y_V_address0;
output   vertex_y_V_ce0;
output   vertex_y_V_we0;
output  [23:0] vertex_y_V_d0;
output  [12:0] vertex_used_V_address0;
output   vertex_used_V_ce0;
output   vertex_used_V_we0;
output  [0:0] vertex_used_V_d0;
output  [31:0] grp_fu_1099_p_din0;
input  [63:0] grp_fu_1099_p_dout0;
output   grp_fu_1099_p_ce;
output  [31:0] grp_fu_1102_p_din0;
input  [63:0] grp_fu_1102_p_dout0;
output   grp_fu_1102_p_ce;

reg ap_idle;
reg x_in_stream_TREADY;
reg vertex_x_V_ce0;
reg vertex_x_V_we0;
reg vertex_y_V_ce0;
reg vertex_y_V_we0;
reg vertex_used_V_ce0;
reg vertex_used_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln890_fu_174_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    x_in_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] i_cast_fu_186_p1;
reg   [63:0] i_cast_reg_685;
reg   [63:0] i_cast_reg_685_pp0_iter1_reg;
reg   [63:0] tmp_data_V_reg_691;
reg   [63:0] tmp_data_V_reg_691_pp0_iter1_reg;
wire   [31:0] empty_63_fu_209_p1;
wire   [31:0] empty_64_fu_214_p1;
reg   [0:0] p_Result_s_reg_707;
wire   [51:0] trunc_ln554_fu_254_p1;
reg   [51:0] trunc_ln554_reg_712;
wire   [0:0] icmp_ln560_fu_258_p2;
reg   [0:0] icmp_ln560_reg_717;
wire   [11:0] F2_fu_264_p2;
reg   [11:0] F2_reg_724;
reg   [0:0] p_Result_5_reg_732;
wire   [51:0] trunc_ln554_2_fu_300_p1;
reg   [51:0] trunc_ln554_2_reg_737;
wire   [0:0] icmp_ln560_2_fu_304_p2;
reg   [0:0] icmp_ln560_2_reg_742;
wire   [11:0] F2_2_fu_310_p2;
reg   [11:0] F2_2_reg_749;
reg   [1:0] i_fu_98;
wire   [1:0] add_ln890_fu_180_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_2;
wire   [31:0] trunc_ln668_fu_195_p1;
wire   [31:0] tmp_s_fu_199_p4;
wire   [63:0] ireg_fu_224_p1;
wire   [10:0] exp_tmp_fu_240_p4;
wire   [62:0] trunc_ln544_fu_228_p1;
wire   [11:0] zext_ln455_fu_250_p1;
wire   [63:0] ireg_2_fu_270_p1;
wire   [10:0] exp_tmp_2_fu_286_p4;
wire   [62:0] trunc_ln544_2_fu_274_p1;
wire   [11:0] zext_ln455_2_fu_296_p1;
wire   [52:0] p_Result_4_fu_316_p3;
wire   [53:0] zext_ln558_fu_323_p1;
wire   [53:0] man_V_6_fu_327_p2;
wire   [0:0] icmp_ln570_fu_340_p2;
wire   [11:0] add_ln570_fu_345_p2;
wire   [11:0] sub_ln570_fu_350_p2;
wire  signed [11:0] sh_amt_fu_355_p3;
wire   [53:0] man_V_7_fu_333_p3;
wire  signed [31:0] sext_ln570_fu_363_p1;
wire   [53:0] zext_ln575_fu_382_p1;
wire   [53:0] ashr_ln575_fu_386_p2;
wire   [0:0] tmp_fu_396_p3;
wire   [0:0] icmp_ln574_fu_376_p2;
wire   [23:0] trunc_ln575_fu_392_p1;
wire   [23:0] select_ln577_fu_403_p3;
wire   [23:0] trunc_ln572_fu_372_p1;
wire   [23:0] sext_ln570cast_fu_425_p1;
wire   [0:0] icmp_ln592_fu_419_p2;
wire   [23:0] shl_ln593_fu_429_p2;
wire   [0:0] icmp_ln571_fu_367_p2;
wire   [0:0] xor_ln560_fu_443_p2;
wire   [0:0] and_ln571_fu_448_p2;
wire   [23:0] select_ln592_fu_435_p3;
wire   [0:0] or_ln571_fu_462_p2;
wire   [0:0] xor_ln571_fu_467_p2;
wire   [0:0] and_ln570_fu_473_p2;
wire   [23:0] select_ln574_fu_411_p3;
wire   [23:0] select_ln571_fu_454_p3;
wire   [23:0] select_ln570_fu_479_p3;
wire   [52:0] p_Result_6_fu_495_p3;
wire   [53:0] zext_ln558_2_fu_502_p1;
wire   [53:0] man_V_9_fu_506_p2;
wire   [0:0] icmp_ln570_2_fu_519_p2;
wire   [11:0] add_ln570_2_fu_524_p2;
wire   [11:0] sub_ln570_2_fu_529_p2;
wire  signed [11:0] sh_amt_2_fu_534_p3;
wire   [53:0] man_V_10_fu_512_p3;
wire  signed [31:0] sext_ln570_1_fu_542_p1;
wire   [53:0] zext_ln575_2_fu_561_p1;
wire   [53:0] ashr_ln575_2_fu_565_p2;
wire   [0:0] tmp_4_fu_575_p3;
wire   [0:0] icmp_ln574_2_fu_555_p2;
wire   [23:0] trunc_ln575_2_fu_571_p1;
wire   [23:0] select_ln577_2_fu_582_p3;
wire   [23:0] trunc_ln572_2_fu_551_p1;
wire   [23:0] sext_ln570_1cast_fu_604_p1;
wire   [0:0] icmp_ln592_2_fu_598_p2;
wire   [23:0] shl_ln593_2_fu_608_p2;
wire   [0:0] icmp_ln571_2_fu_546_p2;
wire   [0:0] xor_ln560_1_fu_622_p2;
wire   [0:0] and_ln571_1_fu_627_p2;
wire   [23:0] select_ln592_2_fu_614_p3;
wire   [0:0] or_ln571_1_fu_641_p2;
wire   [0:0] xor_ln571_1_fu_646_p2;
wire   [0:0] and_ln570_1_fu_652_p2;
wire   [23:0] select_ln574_2_fu_590_p3;
wire   [23:0] select_ln571_1_fu_633_p3;
wire   [23:0] select_ln570_2_fu_658_p3;
reg    grp_fu_160_ce;
reg    grp_fu_163_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tri2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln890_fu_174_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_98 <= add_ln890_fu_180_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_98 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        F2_2_reg_749 <= F2_2_fu_310_p2;
        F2_reg_724 <= F2_fu_264_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_cast_reg_685_pp0_iter1_reg[1 : 0] <= i_cast_reg_685[1 : 0];
        icmp_ln560_2_reg_742 <= icmp_ln560_2_fu_304_p2;
        icmp_ln560_reg_717 <= icmp_ln560_fu_258_p2;
        p_Result_5_reg_732 <= ireg_2_fu_270_p1[32'd63];
        p_Result_s_reg_707 <= ireg_fu_224_p1[32'd63];
        tmp_data_V_reg_691_pp0_iter1_reg <= tmp_data_V_reg_691;
        trunc_ln554_2_reg_737 <= trunc_ln554_2_fu_300_p1;
        trunc_ln554_reg_712 <= trunc_ln554_fu_254_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln890_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_685[1 : 0] <= i_cast_fu_186_p1[1 : 0];
        tmp_data_V_reg_691 <= x_in_stream_TDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln890_fu_174_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_160_ce = 1'b1;
    end else begin
        grp_fu_160_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_163_ce = 1'b1;
    end else begin
        grp_fu_163_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vertex_used_V_ce0 = 1'b1;
    end else begin
        vertex_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln890_fu_174_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vertex_used_V_we0 = 1'b1;
    end else begin
        vertex_used_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vertex_x_V_ce0 = 1'b1;
    end else begin
        vertex_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vertex_x_V_we0 = 1'b1;
    end else begin
        vertex_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vertex_y_V_ce0 = 1'b1;
    end else begin
        vertex_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vertex_y_V_we0 = 1'b1;
    end else begin
        vertex_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln890_fu_174_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_in_stream_TDATA_blk_n = x_in_stream_TVALID;
    end else begin
        x_in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln890_fu_174_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_in_stream_TREADY = 1'b1;
    end else begin
        x_in_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_2_fu_310_p2 = (12'd1075 - zext_ln455_2_fu_296_p1);

assign F2_fu_264_p2 = (12'd1075 - zext_ln455_fu_250_p1);

assign add_ln570_2_fu_524_p2 = ($signed(F2_2_reg_749) + $signed(12'd4076));

assign add_ln570_fu_345_p2 = ($signed(F2_reg_724) + $signed(12'd4076));

assign add_ln890_fu_180_p2 = (ap_sig_allocacmp_i_2 + 2'd1);

assign and_ln570_1_fu_652_p2 = (xor_ln571_1_fu_646_p2 & icmp_ln570_2_fu_519_p2);

assign and_ln570_fu_473_p2 = (xor_ln571_fu_467_p2 & icmp_ln570_fu_340_p2);

assign and_ln571_1_fu_627_p2 = (xor_ln560_1_fu_622_p2 & icmp_ln571_2_fu_546_p2);

assign and_ln571_fu_448_p2 = (xor_ln560_fu_443_p2 & icmp_ln571_fu_367_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln890_fu_174_p2 == 1'd0) & (x_in_stream_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln890_fu_174_p2 == 1'd0) & (x_in_stream_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((icmp_ln890_fu_174_p2 == 1'd0) & (x_in_stream_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln575_2_fu_565_p2 = $signed(man_V_10_fu_512_p3) >>> zext_ln575_2_fu_561_p1;

assign ashr_ln575_fu_386_p2 = $signed(man_V_7_fu_333_p3) >>> zext_ln575_fu_382_p1;

assign empty_63_fu_209_p1 = trunc_ln668_fu_195_p1;

assign empty_64_fu_214_p1 = tmp_s_fu_199_p4;

assign exp_tmp_2_fu_286_p4 = {{ireg_2_fu_270_p1[62:52]}};

assign exp_tmp_fu_240_p4 = {{ireg_fu_224_p1[62:52]}};

assign grp_fu_1099_p_ce = grp_fu_160_ce;

assign grp_fu_1099_p_din0 = empty_63_fu_209_p1;

assign grp_fu_1102_p_ce = grp_fu_163_ce;

assign grp_fu_1102_p_din0 = empty_64_fu_214_p1;

assign i_cast_fu_186_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln560_2_fu_304_p2 = ((trunc_ln544_2_fu_274_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln560_fu_258_p2 = ((trunc_ln544_fu_228_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln570_2_fu_519_p2 = (($signed(F2_2_reg_749) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln570_fu_340_p2 = (($signed(F2_reg_724) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln571_2_fu_546_p2 = ((F2_2_reg_749 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_367_p2 = ((F2_reg_724 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln574_2_fu_555_p2 = ((sh_amt_2_fu_534_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln574_fu_376_p2 = ((sh_amt_fu_355_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln592_2_fu_598_p2 = ((sh_amt_2_fu_534_p3 < 12'd24) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_419_p2 = ((sh_amt_fu_355_p3 < 12'd24) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_174_p2 = ((ap_sig_allocacmp_i_2 == 2'd3) ? 1'b1 : 1'b0);

assign ireg_2_fu_270_p1 = grp_fu_1102_p_dout0;

assign ireg_fu_224_p1 = grp_fu_1099_p_dout0;

assign man_V_10_fu_512_p3 = ((p_Result_5_reg_732[0:0] == 1'b1) ? man_V_9_fu_506_p2 : zext_ln558_2_fu_502_p1);

assign man_V_6_fu_327_p2 = (54'd0 - zext_ln558_fu_323_p1);

assign man_V_7_fu_333_p3 = ((p_Result_s_reg_707[0:0] == 1'b1) ? man_V_6_fu_327_p2 : zext_ln558_fu_323_p1);

assign man_V_9_fu_506_p2 = (54'd0 - zext_ln558_2_fu_502_p1);

assign or_ln571_1_fu_641_p2 = (icmp_ln571_2_fu_546_p2 | icmp_ln560_2_reg_742);

assign or_ln571_fu_462_p2 = (icmp_ln571_fu_367_p2 | icmp_ln560_reg_717);

assign p_Result_4_fu_316_p3 = {{1'd1}, {trunc_ln554_reg_712}};

assign p_Result_6_fu_495_p3 = {{1'd1}, {trunc_ln554_2_reg_737}};

assign select_ln570_2_fu_658_p3 = ((and_ln570_1_fu_652_p2[0:0] == 1'b1) ? select_ln574_2_fu_590_p3 : select_ln571_1_fu_633_p3);

assign select_ln570_fu_479_p3 = ((and_ln570_fu_473_p2[0:0] == 1'b1) ? select_ln574_fu_411_p3 : select_ln571_fu_454_p3);

assign select_ln571_1_fu_633_p3 = ((and_ln571_1_fu_627_p2[0:0] == 1'b1) ? trunc_ln572_2_fu_551_p1 : select_ln592_2_fu_614_p3);

assign select_ln571_fu_454_p3 = ((and_ln571_fu_448_p2[0:0] == 1'b1) ? trunc_ln572_fu_372_p1 : select_ln592_fu_435_p3);

assign select_ln574_2_fu_590_p3 = ((icmp_ln574_2_fu_555_p2[0:0] == 1'b1) ? trunc_ln575_2_fu_571_p1 : select_ln577_2_fu_582_p3);

assign select_ln574_fu_411_p3 = ((icmp_ln574_fu_376_p2[0:0] == 1'b1) ? trunc_ln575_fu_392_p1 : select_ln577_fu_403_p3);

assign select_ln577_2_fu_582_p3 = ((tmp_4_fu_575_p3[0:0] == 1'b1) ? 24'd16777215 : 24'd0);

assign select_ln577_fu_403_p3 = ((tmp_fu_396_p3[0:0] == 1'b1) ? 24'd16777215 : 24'd0);

assign select_ln592_2_fu_614_p3 = ((icmp_ln592_2_fu_598_p2[0:0] == 1'b1) ? shl_ln593_2_fu_608_p2 : 24'd0);

assign select_ln592_fu_435_p3 = ((icmp_ln592_fu_419_p2[0:0] == 1'b1) ? shl_ln593_fu_429_p2 : 24'd0);

assign sext_ln570_1_fu_542_p1 = sh_amt_2_fu_534_p3;

assign sext_ln570_1cast_fu_604_p1 = sext_ln570_1_fu_542_p1[23:0];

assign sext_ln570_fu_363_p1 = sh_amt_fu_355_p3;

assign sext_ln570cast_fu_425_p1 = sext_ln570_fu_363_p1[23:0];

assign sh_amt_2_fu_534_p3 = ((icmp_ln570_2_fu_519_p2[0:0] == 1'b1) ? add_ln570_2_fu_524_p2 : sub_ln570_2_fu_529_p2);

assign sh_amt_fu_355_p3 = ((icmp_ln570_fu_340_p2[0:0] == 1'b1) ? add_ln570_fu_345_p2 : sub_ln570_fu_350_p2);

assign shl_ln593_2_fu_608_p2 = trunc_ln572_2_fu_551_p1 << sext_ln570_1cast_fu_604_p1;

assign shl_ln593_fu_429_p2 = trunc_ln572_fu_372_p1 << sext_ln570cast_fu_425_p1;

assign sub_ln570_2_fu_529_p2 = (12'd20 - F2_2_reg_749);

assign sub_ln570_fu_350_p2 = (12'd20 - F2_reg_724);

assign tmp_4_fu_575_p3 = tmp_data_V_reg_691_pp0_iter1_reg[32'd63];

assign tmp_fu_396_p3 = tmp_data_V_reg_691_pp0_iter1_reg[32'd31];

assign tmp_s_fu_199_p4 = {{x_in_stream_TDATA[63:32]}};

assign trunc_ln544_2_fu_274_p1 = ireg_2_fu_270_p1[62:0];

assign trunc_ln544_fu_228_p1 = ireg_fu_224_p1[62:0];

assign trunc_ln554_2_fu_300_p1 = ireg_2_fu_270_p1[51:0];

assign trunc_ln554_fu_254_p1 = ireg_fu_224_p1[51:0];

assign trunc_ln572_2_fu_551_p1 = man_V_10_fu_512_p3[23:0];

assign trunc_ln572_fu_372_p1 = man_V_7_fu_333_p3[23:0];

assign trunc_ln575_2_fu_571_p1 = ashr_ln575_2_fu_565_p2[23:0];

assign trunc_ln575_fu_392_p1 = ashr_ln575_fu_386_p2[23:0];

assign trunc_ln668_fu_195_p1 = x_in_stream_TDATA[31:0];

assign vertex_used_V_address0 = i_cast_fu_186_p1;

assign vertex_used_V_d0 = 1'd1;

assign vertex_x_V_address0 = i_cast_reg_685_pp0_iter1_reg;

assign vertex_x_V_d0 = ((icmp_ln560_reg_717[0:0] == 1'b1) ? 24'd0 : select_ln570_fu_479_p3);

assign vertex_y_V_address0 = i_cast_reg_685_pp0_iter1_reg;

assign vertex_y_V_d0 = ((icmp_ln560_2_reg_742[0:0] == 1'b1) ? 24'd0 : select_ln570_2_fu_658_p3);

assign xor_ln560_1_fu_622_p2 = (icmp_ln560_2_reg_742 ^ 1'd1);

assign xor_ln560_fu_443_p2 = (icmp_ln560_reg_717 ^ 1'd1);

assign xor_ln571_1_fu_646_p2 = (or_ln571_1_fu_641_p2 ^ 1'd1);

assign xor_ln571_fu_467_p2 = (or_ln571_fu_462_p2 ^ 1'd1);

assign zext_ln455_2_fu_296_p1 = exp_tmp_2_fu_286_p4;

assign zext_ln455_fu_250_p1 = exp_tmp_fu_240_p4;

assign zext_ln558_2_fu_502_p1 = p_Result_6_fu_495_p3;

assign zext_ln558_fu_323_p1 = p_Result_4_fu_316_p3;

assign zext_ln575_2_fu_561_p1 = $unsigned(sext_ln570_1_fu_542_p1);

assign zext_ln575_fu_382_p1 = $unsigned(sext_ln570_fu_363_p1);

always @ (posedge ap_clk) begin
    i_cast_reg_685[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_685_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //tri2d_tri2d_Pipeline_VITIS_LOOP_890_1
