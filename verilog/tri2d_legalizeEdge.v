// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_legalizeEdge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        faceIdx,
        edgeIdx,
        newEdgeIdx_V_read,
        he_used_V_address0,
        he_used_V_ce0,
        he_used_V_we0,
        he_used_V_d0,
        he_used_V_q0,
        face_used_V_address0,
        face_used_V_ce0,
        face_used_V_we0,
        face_used_V_d0,
        face_used_V_q0,
        he_tail_V_address0,
        he_tail_V_ce0,
        he_tail_V_we0,
        he_tail_V_d0,
        he_tail_V_q0,
        he_tail_V_address1,
        he_tail_V_ce1,
        he_tail_V_we1,
        he_tail_V_d1,
        he_tail_V_q1,
        he_next_V_address0,
        he_next_V_ce0,
        he_next_V_we0,
        he_next_V_d0,
        he_next_V_q0,
        he_prev_V_address0,
        he_prev_V_ce0,
        he_prev_V_we0,
        he_prev_V_d0,
        he_prev_V_q0,
        he_twin_V_address0,
        he_twin_V_ce0,
        he_twin_V_we0,
        he_twin_V_d0,
        he_twin_V_q0,
        he_twin_V_address1,
        he_twin_V_ce1,
        he_twin_V_we1,
        he_twin_V_d1,
        he_twin_V_q1,
        he_face_V_address0,
        he_face_V_ce0,
        he_face_V_we0,
        he_face_V_d0,
        he_face_V_q0,
        vertex_x_V_address0,
        vertex_x_V_ce0,
        vertex_x_V_q0,
        vertex_x_V_address1,
        vertex_x_V_ce1,
        vertex_x_V_q1,
        vertex_y_V_address0,
        vertex_y_V_ce0,
        vertex_y_V_q0,
        vertex_y_V_address1,
        vertex_y_V_ce1,
        vertex_y_V_q1,
        freeEdgeCount_i,
        freeEdgeCount_o,
        freeEdgeCount_o_ap_vld,
        freeEdges_V_address0,
        freeEdges_V_ce0,
        freeEdges_V_we0,
        freeEdges_V_d0,
        freeEdges_V_q0,
        replaceIdx_i,
        replaceIdx_o,
        replaceIdx_o_ap_vld,
        tri_num_V_i,
        tri_num_V_o,
        tri_num_V_o_ap_vld,
        face_edge_V_address0,
        face_edge_V_ce0,
        face_edge_V_we0,
        face_edge_V_d0,
        face_edge_V_q0,
        enhanced_grid_grid_size_x,
        enhanced_grid_x_min_V,
        enhanced_grid_cell_width_V,
        enhanced_grid_grid_size_y,
        enhanced_grid_y_min_V,
        enhanced_grid_cell_height_V,
        enhanced_grid_total_cells,
        enhanced_grid_flat_cells_triangle_count_address0,
        enhanced_grid_flat_cells_triangle_count_ce0,
        enhanced_grid_flat_cells_triangle_count_we0,
        enhanced_grid_flat_cells_triangle_count_d0,
        enhanced_grid_flat_cells_triangle_count_q0,
        enhanced_grid_flat_cells_triangles_V_address0,
        enhanced_grid_flat_cells_triangles_V_ce0,
        enhanced_grid_flat_cells_triangles_V_we0,
        enhanced_grid_flat_cells_triangles_V_d0,
        enhanced_grid_flat_cells_triangles_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] faceIdx;
input  [14:0] edgeIdx;
input  [14:0] newEdgeIdx_V_read;
output  [15:0] he_used_V_address0;
output   he_used_V_ce0;
output   he_used_V_we0;
output  [0:0] he_used_V_d0;
input  [0:0] he_used_V_q0;
output  [13:0] face_used_V_address0;
output   face_used_V_ce0;
output   face_used_V_we0;
output  [0:0] face_used_V_d0;
input  [0:0] face_used_V_q0;
output  [15:0] he_tail_V_address0;
output   he_tail_V_ce0;
output   he_tail_V_we0;
output  [12:0] he_tail_V_d0;
input  [12:0] he_tail_V_q0;
output  [15:0] he_tail_V_address1;
output   he_tail_V_ce1;
output   he_tail_V_we1;
output  [12:0] he_tail_V_d1;
input  [12:0] he_tail_V_q1;
output  [15:0] he_next_V_address0;
output   he_next_V_ce0;
output   he_next_V_we0;
output  [14:0] he_next_V_d0;
input  [14:0] he_next_V_q0;
output  [15:0] he_prev_V_address0;
output   he_prev_V_ce0;
output   he_prev_V_we0;
output  [14:0] he_prev_V_d0;
input  [14:0] he_prev_V_q0;
output  [15:0] he_twin_V_address0;
output   he_twin_V_ce0;
output   he_twin_V_we0;
output  [14:0] he_twin_V_d0;
input  [14:0] he_twin_V_q0;
output  [15:0] he_twin_V_address1;
output   he_twin_V_ce1;
output   he_twin_V_we1;
output  [14:0] he_twin_V_d1;
input  [14:0] he_twin_V_q1;
output  [15:0] he_face_V_address0;
output   he_face_V_ce0;
output   he_face_V_we0;
output  [13:0] he_face_V_d0;
input  [13:0] he_face_V_q0;
output  [12:0] vertex_x_V_address0;
output   vertex_x_V_ce0;
input  [23:0] vertex_x_V_q0;
output  [12:0] vertex_x_V_address1;
output   vertex_x_V_ce1;
input  [23:0] vertex_x_V_q1;
output  [12:0] vertex_y_V_address0;
output   vertex_y_V_ce0;
input  [23:0] vertex_y_V_q0;
output  [12:0] vertex_y_V_address1;
output   vertex_y_V_ce1;
input  [23:0] vertex_y_V_q1;
input  [31:0] freeEdgeCount_i;
output  [31:0] freeEdgeCount_o;
output   freeEdgeCount_o_ap_vld;
output  [8:0] freeEdges_V_address0;
output   freeEdges_V_ce0;
output   freeEdges_V_we0;
output  [14:0] freeEdges_V_d0;
input  [14:0] freeEdges_V_q0;
input  [9:0] replaceIdx_i;
output  [9:0] replaceIdx_o;
output   replaceIdx_o_ap_vld;
input  [13:0] tri_num_V_i;
output  [13:0] tri_num_V_o;
output   tri_num_V_o_ap_vld;
output  [13:0] face_edge_V_address0;
output   face_edge_V_ce0;
output   face_edge_V_we0;
output  [14:0] face_edge_V_d0;
input  [14:0] face_edge_V_q0;
input  [6:0] enhanced_grid_grid_size_x;
input  [23:0] enhanced_grid_x_min_V;
input  [23:0] enhanced_grid_cell_width_V;
input  [6:0] enhanced_grid_grid_size_y;
input  [23:0] enhanced_grid_y_min_V;
input  [23:0] enhanced_grid_cell_height_V;
input  [12:0] enhanced_grid_total_cells;
output  [11:0] enhanced_grid_flat_cells_triangle_count_address0;
output   enhanced_grid_flat_cells_triangle_count_ce0;
output   enhanced_grid_flat_cells_triangle_count_we0;
output  [31:0] enhanced_grid_flat_cells_triangle_count_d0;
input  [31:0] enhanced_grid_flat_cells_triangle_count_q0;
output  [16:0] enhanced_grid_flat_cells_triangles_V_address0;
output   enhanced_grid_flat_cells_triangles_V_ce0;
output   enhanced_grid_flat_cells_triangles_V_we0;
output  [13:0] enhanced_grid_flat_cells_triangles_V_d0;
input  [13:0] enhanced_grid_flat_cells_triangles_V_q0;
output  [14:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] he_used_V_address0;
reg he_used_V_ce0;
reg he_used_V_we0;
reg[0:0] he_used_V_d0;
reg[13:0] face_used_V_address0;
reg face_used_V_ce0;
reg face_used_V_we0;
reg[0:0] face_used_V_d0;
reg[15:0] he_tail_V_address0;
reg he_tail_V_ce0;
reg he_tail_V_we0;
reg[12:0] he_tail_V_d0;
reg[15:0] he_tail_V_address1;
reg he_tail_V_ce1;
reg he_tail_V_we1;
reg[12:0] he_tail_V_d1;
reg[15:0] he_next_V_address0;
reg he_next_V_ce0;
reg he_next_V_we0;
reg[14:0] he_next_V_d0;
reg[15:0] he_prev_V_address0;
reg he_prev_V_ce0;
reg he_prev_V_we0;
reg[14:0] he_prev_V_d0;
reg[15:0] he_twin_V_address0;
reg he_twin_V_ce0;
reg he_twin_V_we0;
reg[14:0] he_twin_V_d0;
reg[15:0] he_twin_V_address1;
reg he_twin_V_ce1;
reg he_twin_V_we1;
reg[14:0] he_twin_V_d1;
reg[15:0] he_face_V_address0;
reg he_face_V_ce0;
reg he_face_V_we0;
reg[13:0] he_face_V_d0;
reg[12:0] vertex_x_V_address0;
reg vertex_x_V_ce0;
reg[12:0] vertex_x_V_address1;
reg vertex_x_V_ce1;
reg[12:0] vertex_y_V_address0;
reg vertex_y_V_ce0;
reg[12:0] vertex_y_V_address1;
reg vertex_y_V_ce1;
reg[31:0] freeEdgeCount_o;
reg freeEdgeCount_o_ap_vld;
reg[8:0] freeEdges_V_address0;
reg freeEdges_V_ce0;
reg freeEdges_V_we0;
reg[9:0] replaceIdx_o;
reg replaceIdx_o_ap_vld;
reg[13:0] tri_num_V_o;
reg tri_num_V_o_ap_vld;
reg[13:0] face_edge_V_address0;
reg face_edge_V_ce0;
reg face_edge_V_we0;
reg[14:0] face_edge_V_d0;
reg enhanced_grid_flat_cells_triangle_count_ce0;
reg enhanced_grid_flat_cells_triangle_count_we0;
reg enhanced_grid_flat_cells_triangles_V_ce0;
reg enhanced_grid_flat_cells_triangles_V_we0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] call_count;
reg   [31:0] total_flips;
reg   [31:0] collected_triangles;
reg   [31:0] stackSize_5_reg_2280;
wire    ap_CS_fsm_state2;
wire   [31:0] stackSize_6_fu_1269_p2;
reg   [31:0] stackSize_6_reg_2296;
wire   [0:0] and_ln547_fu_1263_p2;
reg   [4:0] edgeStack_V_addr_1_reg_2305;
reg   [4:0] faceStack_V_addr_1_reg_2311;
wire   [14:0] edgeStack_V_q0;
reg   [14:0] currentEdge_V_reg_2317;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln541_fu_1281_p1;
reg   [63:0] zext_ln541_reg_2322;
reg   [0:0] he_used_V_load_reg_2335;
wire    ap_CS_fsm_state4;
reg   [13:0] face_used_V_addr_reg_2339;
reg   [0:0] face_used_V_load_reg_2344;
wire    ap_CS_fsm_state5;
reg   [12:0] v1_V_reg_2368;
wire    ap_CS_fsm_state6;
reg   [14:0] nextEdge_V_reg_2375;
wire   [63:0] zext_ln541_14_fu_1295_p1;
reg   [63:0] zext_ln541_14_reg_2380;
reg   [14:0] prevEdge_V_reg_2390;
wire   [63:0] zext_ln541_15_fu_1300_p1;
reg   [63:0] zext_ln541_15_reg_2395;
reg   [14:0] twinEdge_V_reg_2405;
reg   [12:0] v2_V_reg_2412;
wire    ap_CS_fsm_state7;
reg   [12:0] v3_V_reg_2419;
wire   [0:0] icmp_ln1019_fu_1305_p2;
reg   [0:0] icmp_ln1019_reg_2427;
wire   [63:0] zext_ln541_16_fu_1310_p1;
reg   [63:0] zext_ln541_16_reg_2431;
wire   [0:0] icmp_ln1019_1_fu_1318_p2;
reg   [0:0] icmp_ln1019_1_reg_2442;
wire    ap_CS_fsm_state8;
reg   [13:0] face_used_V_addr_1_reg_2446;
reg   [0:0] face_used_V_load_1_reg_2451;
wire    ap_CS_fsm_state9;
reg   [14:0] twinNextEdge_V_reg_2465;
wire    ap_CS_fsm_state10;
reg   [14:0] twinPrevEdge_V_reg_2471;
wire   [63:0] zext_ln541_18_fu_1349_p1;
reg   [63:0] zext_ln541_18_reg_2476;
reg   [12:0] v4_V_reg_2506;
wire    ap_CS_fsm_state11;
reg   [23:0] p_x_V_reg_2512;
reg   [23:0] p_y_V_reg_2517;
reg   [23:0] p_x_V_11_reg_2522;
reg   [23:0] p_y_V_12_reg_2527;
wire   [47:0] ret_V_57_fu_1699_p2;
reg  signed [47:0] ret_V_57_reg_2552;
wire    ap_CS_fsm_state12;
wire   [63:0] ret_V_45_fu_1725_p2;
reg  signed [63:0] ret_V_45_reg_2557;
wire   [47:0] ret_V_58_fu_1739_p2;
reg  signed [47:0] ret_V_58_reg_2562;
wire   [63:0] ret_V_47_fu_1765_p2;
reg  signed [63:0] ret_V_47_reg_2567;
wire   [47:0] ret_V_59_fu_1779_p2;
reg  signed [47:0] ret_V_59_reg_2572;
wire   [63:0] ret_V_49_fu_1805_p2;
reg  signed [63:0] ret_V_49_reg_2577;
wire   [0:0] result_fu_1869_p2;
reg   [0:0] result_reg_2582;
wire    ap_CS_fsm_state13;
reg   [14:0] e2_V_4_reg_2596;
wire    ap_CS_fsm_state14;
reg   [14:0] e2_V_5_reg_2602;
reg   [14:0] e2_V_6_reg_2618;
wire    ap_CS_fsm_state15;
reg   [14:0] e2_V_7_reg_2624;
wire   [31:0] flip_count_3_fu_1899_p2;
reg   [31:0] flip_count_3_reg_2630;
wire    ap_CS_fsm_state26;
reg   [13:0] f1_new_V_reg_2636;
wire   [13:0] f2_new_V_fu_1908_p2;
reg   [13:0] f2_new_V_reg_2644;
wire   [0:0] grp_fu_1193_p2;
reg   [0:0] icmp_ln443_reg_2658;
wire   [14:0] add_ln840_1_fu_1914_p2;
wire   [31:0] grp_fu_1199_p2;
reg   [31:0] add_ln444_reg_2667;
wire   [0:0] icmp_ln443_1_fu_1930_p2;
reg   [0:0] icmp_ln443_1_reg_2677;
wire    ap_CS_fsm_state27;
wire   [14:0] add_ln840_2_fu_1936_p2;
wire   [31:0] add_ln444_1_fu_1942_p2;
reg   [31:0] add_ln444_1_reg_2691;
wire   [0:0] icmp_ln443_2_fu_1963_p2;
reg   [0:0] icmp_ln443_2_reg_2701;
wire    ap_CS_fsm_state28;
wire   [14:0] add_ln840_3_fu_1969_p2;
wire   [63:0] zext_ln541_25_fu_2001_p1;
reg   [63:0] zext_ln541_25_reg_2715;
wire    ap_CS_fsm_state29;
wire   [63:0] zext_ln541_26_fu_2021_p1;
reg   [63:0] zext_ln541_26_reg_2720;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln541_27_fu_2030_p1;
reg   [63:0] zext_ln541_27_reg_2725;
wire    ap_CS_fsm_state31;
reg   [0:0] icmp_ln443_3_reg_2735;
wire   [14:0] add_ln840_fu_2039_p2;
reg   [31:0] add_ln444_3_reg_2744;
wire   [0:0] icmp_ln443_4_fu_2056_p2;
reg   [0:0] icmp_ln443_4_reg_2754;
wire    ap_CS_fsm_state32;
wire   [14:0] add_ln840_5_fu_2062_p2;
wire   [31:0] add_ln444_4_fu_2068_p2;
reg   [31:0] add_ln444_4_reg_2768;
wire   [0:0] icmp_ln443_5_fu_2089_p2;
reg   [0:0] icmp_ln443_5_reg_2778;
wire    ap_CS_fsm_state33;
wire   [14:0] add_ln840_6_fu_2095_p2;
wire   [0:0] icmp_ln659_1_fu_2143_p2;
reg   [0:0] icmp_ln659_1_reg_2792;
wire    ap_CS_fsm_state34;
wire   [63:0] zext_ln541_31_fu_2152_p1;
reg   [63:0] zext_ln541_31_reg_2797;
wire    ap_CS_fsm_state35;
wire   [63:0] zext_ln541_29_fu_2162_p1;
reg   [63:0] zext_ln541_29_reg_2806;
wire    ap_CS_fsm_state37;
wire   [63:0] zext_ln541_30_fu_2175_p1;
reg   [63:0] zext_ln541_30_reg_2811;
wire    ap_CS_fsm_state38;
wire   [0:0] and_ln659_fu_2207_p2;
reg   [0:0] and_ln659_reg_2816;
wire    ap_CS_fsm_state43;
wire   [4:0] trunc_ln539_fu_2221_p1;
reg   [4:0] trunc_ln539_reg_2820;
reg   [4:0] edgeStack_V_address0;
reg    edgeStack_V_ce0;
reg    edgeStack_V_we0;
reg   [14:0] edgeStack_V_d0;
reg   [4:0] edgeStack_V_address1;
reg    edgeStack_V_ce1;
reg    edgeStack_V_we1;
reg   [14:0] edgeStack_V_d1;
reg   [4:0] faceStack_V_address0;
reg    faceStack_V_ce0;
reg    faceStack_V_we0;
reg   [13:0] faceStack_V_d0;
wire   [13:0] faceStack_V_q0;
reg   [4:0] faceStack_V_address1;
reg    faceStack_V_ce1;
reg    faceStack_V_we1;
reg   [13:0] faceStack_V_d1;
wire    grp_freeHalfEdge_fu_1141_ap_start;
wire    grp_freeHalfEdge_fu_1141_ap_done;
wire    grp_freeHalfEdge_fu_1141_ap_idle;
wire    grp_freeHalfEdge_fu_1141_ap_ready;
reg   [14:0] grp_freeHalfEdge_fu_1141_edgeId;
wire   [15:0] grp_freeHalfEdge_fu_1141_he_used_V_address0;
wire    grp_freeHalfEdge_fu_1141_he_used_V_ce0;
wire    grp_freeHalfEdge_fu_1141_he_used_V_we0;
wire   [0:0] grp_freeHalfEdge_fu_1141_he_used_V_d0;
wire   [31:0] grp_freeHalfEdge_fu_1141_freeEdgeCount_o;
wire    grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld;
wire   [8:0] grp_freeHalfEdge_fu_1141_freeEdges_V_address0;
wire    grp_freeHalfEdge_fu_1141_freeEdges_V_ce0;
wire    grp_freeHalfEdge_fu_1141_freeEdges_V_we0;
wire   [14:0] grp_freeHalfEdge_fu_1141_freeEdges_V_d0;
wire   [9:0] grp_freeHalfEdge_fu_1141_replaceIdx_o;
wire    grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld;
wire    grp_assignTriangleToGrid_fu_1154_ap_start;
wire    grp_assignTriangleToGrid_fu_1154_ap_done;
wire    grp_assignTriangleToGrid_fu_1154_ap_idle;
wire    grp_assignTriangleToGrid_fu_1154_ap_ready;
reg   [13:0] grp_assignTriangleToGrid_fu_1154_triangleIdx;
wire   [13:0] grp_assignTriangleToGrid_fu_1154_face_used_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_face_used_V_ce0;
wire   [13:0] grp_assignTriangleToGrid_fu_1154_face_edge_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_face_edge_V_ce0;
wire   [15:0] grp_assignTriangleToGrid_fu_1154_he_tail_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_he_tail_V_ce0;
wire   [15:0] grp_assignTriangleToGrid_fu_1154_he_next_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_he_next_V_ce0;
wire   [12:0] grp_assignTriangleToGrid_fu_1154_vertex_x_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_vertex_x_V_ce0;
wire   [12:0] grp_assignTriangleToGrid_fu_1154_vertex_x_V_address1;
wire    grp_assignTriangleToGrid_fu_1154_vertex_x_V_ce1;
wire   [12:0] grp_assignTriangleToGrid_fu_1154_vertex_y_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_vertex_y_V_ce0;
wire   [12:0] grp_assignTriangleToGrid_fu_1154_vertex_y_V_address1;
wire    grp_assignTriangleToGrid_fu_1154_vertex_y_V_ce1;
wire   [11:0] grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_address0;
wire    grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_ce0;
wire    grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_we0;
wire   [31:0] grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_d0;
wire   [16:0] grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_address0;
wire    grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_ce0;
wire    grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_we0;
wire   [13:0] grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_d0;
reg   [0:0] ap_phi_mux_stackSize_ph_phi_fu_938_p4;
wire   [0:0] or_ln540_fu_1217_p2;
reg   [14:0] ap_phi_mux_e2_V_1_phi_fu_949_p4;
reg   [14:0] e2_V_1_reg_946;
reg   [31:0] ap_phi_mux_empty_phi_fu_959_p4;
reg   [31:0] empty_reg_956;
reg   [14:0] e1_V_2_reg_965;
reg   [14:0] ap_phi_mux_e3_V_1_phi_fu_984_p4;
reg   [14:0] e3_V_1_reg_981;
reg   [31:0] ap_phi_mux_empty_69_phi_fu_995_p4;
reg   [31:0] empty_69_reg_992;
reg   [14:0] e2_V_8_reg_1001;
reg   [14:0] ap_phi_mux_e3_V_3_phi_fu_1022_p4;
reg   [14:0] e3_V_3_reg_1016;
reg   [14:0] e4_V_1_reg_1032;
reg   [14:0] ap_phi_mux_e5_V_1_phi_fu_1046_p4;
reg   [14:0] e5_V_1_reg_1043;
reg   [31:0] ap_phi_mux_empty_70_phi_fu_1057_p4;
reg   [31:0] empty_70_reg_1054;
reg   [14:0] e4_V_3_reg_1063;
reg   [14:0] ap_phi_mux_e6_V_1_phi_fu_1083_p4;
reg   [14:0] e6_V_1_reg_1080;
reg   [31:0] ap_phi_mux_empty_71_phi_fu_1094_p4;
reg   [31:0] empty_71_reg_1091;
reg   [14:0] e5_V_3_reg_1100;
reg   [14:0] ap_phi_mux_e6_V_3_phi_fu_1121_p4;
reg   [14:0] e6_V_3_reg_1116;
reg   [14:0] newEdgeIdx_6_reg_1131;
reg    grp_freeHalfEdge_fu_1141_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
reg    grp_assignTriangleToGrid_fu_1154_ap_start_reg;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state41;
wire   [63:0] zext_ln550_fu_1275_p1;
wire   [63:0] zext_ln541_13_fu_1286_p1;
wire   [63:0] zext_ln541_17_fu_1324_p1;
wire   [63:0] zext_ln541_19_fu_1354_p1;
wire   [63:0] zext_ln541_20_fu_1359_p1;
wire   [63:0] zext_ln541_21_fu_1364_p1;
wire   [63:0] zext_ln541_22_fu_1369_p1;
wire   [63:0] zext_ln541_23_fu_1895_p1;
wire   [63:0] zext_ln444_fu_1925_p1;
wire   [63:0] zext_ln444_1_fu_1954_p1;
wire   [63:0] zext_ln444_2_fu_1991_p1;
wire   [63:0] zext_ln541_24_fu_1996_p1;
wire   [63:0] zext_ln444_3_fu_2051_p1;
wire   [63:0] zext_ln444_4_fu_2080_p1;
wire   [63:0] zext_ln444_5_fu_2117_p1;
wire   [63:0] zext_ln541_28_fu_2122_p1;
wire    ap_CS_fsm_state36;
wire   [63:0] zext_ln541_32_fu_2171_p1;
wire    ap_CS_fsm_state39;
wire   [63:0] zext_ln541_33_fu_2184_p1;
wire   [63:0] zext_ln541_34_fu_2188_p1;
wire   [63:0] zext_ln541_35_fu_2192_p1;
wire   [63:0] zext_ln664_fu_2216_p1;
wire   [63:0] zext_ln668_fu_2234_p1;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln672_fu_2245_p1;
wire   [31:0] add_ln341_fu_1333_p2;
wire   [31:0] add_ln590_fu_1883_p2;
wire   [31:0] zext_ln444_7_fu_2107_p1;
wire   [31:0] zext_ln444_6_fu_1981_p1;
wire   [13:0] add_ln840_4_fu_2010_p2;
wire   [31:0] add_ln656_fu_2131_p2;
reg   [31:0] stackSize_fu_138;
wire   [31:0] stackSize_9_fu_2196_p2;
wire   [31:0] zext_ln539_fu_1223_p1;
reg   [14:0] e1_V_1_fu_142;
reg   [31:0] flip_count_fu_146;
wire   [0:0] icmp_ln1023_fu_1205_p2;
wire   [0:0] icmp_ln1023_1_fu_1211_p2;
wire   [0:0] icmp_ln547_fu_1251_p2;
wire   [0:0] icmp_ln547_1_fu_1257_p2;
wire   [0:0] icmp_ln1027_fu_1375_p2;
wire   [0:0] icmp_ln1027_3_fu_1394_p2;
wire   [0:0] icmp_ln1027_4_fu_1413_p2;
wire   [0:0] icmp_ln1027_5_fu_1434_p2;
wire   [23:0] p1_x_V_fu_1387_p3;
wire   [23:0] p4_x_V_fu_1439_p3;
wire  signed [24:0] sext_ln813_fu_1455_p1;
wire  signed [24:0] sext_ln1348_fu_1459_p1;
wire   [24:0] ret_V_51_fu_1463_p2;
wire   [23:0] p1_y_V_fu_1380_p3;
wire   [23:0] p4_y_V_fu_1447_p3;
wire  signed [24:0] sext_ln813_3_fu_1477_p1;
wire  signed [24:0] sext_ln1348_16_fu_1481_p1;
wire   [24:0] ret_V_52_fu_1485_p2;
wire   [23:0] p2_x_V_fu_1406_p3;
wire  signed [24:0] sext_ln1348_17_fu_1499_p1;
wire   [24:0] ret_V_53_fu_1503_p2;
wire   [23:0] p2_y_V_fu_1399_p3;
wire  signed [24:0] sext_ln1348_18_fu_1517_p1;
wire   [24:0] ret_V_54_fu_1521_p2;
wire   [23:0] p3_x_V_fu_1426_p3;
wire  signed [24:0] sext_ln1348_19_fu_1535_p1;
wire   [24:0] ret_V_55_fu_1539_p2;
wire   [23:0] p3_y_V_fu_1418_p3;
wire  signed [24:0] sext_ln1348_20_fu_1553_p1;
wire   [24:0] ret_V_56_fu_1557_p2;
wire   [31:0] a1_V_fu_1469_p3;
wire  signed [31:0] r_V_19_fu_1575_p0;
wire  signed [62:0] sext_ln1270_fu_1571_p1;
wire  signed [31:0] r_V_19_fu_1575_p1;
wire   [62:0] r_V_19_fu_1575_p2;
wire   [31:0] a2_V_fu_1491_p3;
wire  signed [31:0] r_V_21_fu_1595_p0;
wire  signed [62:0] sext_ln1270_1_fu_1591_p1;
wire  signed [31:0] r_V_21_fu_1595_p1;
wire   [62:0] r_V_21_fu_1595_p2;
wire   [31:0] b1_V_fu_1509_p3;
wire  signed [31:0] r_V_23_fu_1615_p0;
wire  signed [62:0] sext_ln1270_2_fu_1611_p1;
wire  signed [31:0] r_V_23_fu_1615_p1;
wire   [62:0] r_V_23_fu_1615_p2;
wire   [31:0] b2_V_fu_1527_p3;
wire  signed [31:0] r_V_25_fu_1635_p0;
wire  signed [62:0] sext_ln1270_3_fu_1631_p1;
wire  signed [31:0] r_V_25_fu_1635_p1;
wire   [62:0] r_V_25_fu_1635_p2;
wire   [31:0] c1_V_fu_1545_p3;
wire  signed [31:0] r_V_27_fu_1655_p0;
wire  signed [62:0] sext_ln1270_4_fu_1651_p1;
wire  signed [31:0] r_V_27_fu_1655_p1;
wire   [62:0] r_V_27_fu_1655_p2;
wire   [31:0] c2_V_fu_1563_p3;
wire  signed [31:0] r_V_29_fu_1675_p0;
wire  signed [62:0] sext_ln1270_5_fu_1671_p1;
wire  signed [31:0] r_V_29_fu_1675_p1;
wire   [62:0] r_V_29_fu_1675_p2;
wire   [46:0] trunc_ln_fu_1581_p4;
wire   [46:0] trunc_ln818_s_fu_1601_p4;
wire  signed [47:0] sext_ln1347_fu_1695_p1;
wire  signed [47:0] sext_ln813_4_fu_1691_p1;
wire  signed [31:0] r_V_fu_1705_p0;
wire  signed [31:0] r_V_fu_1705_p1;
wire  signed [31:0] r_V_40_fu_1711_p0;
wire  signed [31:0] r_V_40_fu_1711_p1;
wire   [62:0] r_V_fu_1705_p2;
wire   [62:0] r_V_40_fu_1711_p2;
wire  signed [63:0] sext_ln1348_28_fu_1717_p1;
wire  signed [63:0] sext_ln1348_29_fu_1721_p1;
wire   [46:0] trunc_ln818_1_fu_1621_p4;
wire   [46:0] trunc_ln818_2_fu_1641_p4;
wire  signed [47:0] sext_ln1347_1_fu_1735_p1;
wire  signed [47:0] sext_ln813_5_fu_1731_p1;
wire  signed [31:0] r_V_41_fu_1745_p0;
wire  signed [31:0] r_V_41_fu_1745_p1;
wire  signed [31:0] r_V_42_fu_1751_p0;
wire  signed [31:0] r_V_42_fu_1751_p1;
wire   [62:0] r_V_41_fu_1745_p2;
wire   [62:0] r_V_42_fu_1751_p2;
wire  signed [63:0] sext_ln1348_30_fu_1757_p1;
wire  signed [63:0] sext_ln1348_31_fu_1761_p1;
wire   [46:0] trunc_ln818_3_fu_1661_p4;
wire   [46:0] trunc_ln818_4_fu_1681_p4;
wire  signed [47:0] sext_ln1347_2_fu_1775_p1;
wire  signed [47:0] sext_ln813_6_fu_1771_p1;
wire  signed [31:0] r_V_43_fu_1785_p0;
wire  signed [31:0] r_V_43_fu_1785_p1;
wire  signed [31:0] r_V_44_fu_1791_p0;
wire  signed [31:0] r_V_44_fu_1791_p1;
wire   [62:0] r_V_43_fu_1785_p2;
wire   [62:0] r_V_44_fu_1791_p2;
wire  signed [63:0] sext_ln1348_32_fu_1797_p1;
wire  signed [63:0] sext_ln1348_33_fu_1801_p1;
wire   [101:0] r_V_31_fu_1817_p2;
wire   [101:0] r_V_35_fu_1829_p2;
wire   [101:0] ret_V_fu_1835_p2;
wire   [101:0] r_V_39_fu_1847_p2;
wire   [101:0] ret_V_50_fu_1853_p2;
wire   [47:0] det_V_fu_1859_p4;
wire   [30:0] trunc_ln615_fu_1959_p1;
wire   [30:0] add_ln444_2_fu_1975_p2;
wire   [30:0] trunc_ln630_fu_2085_p1;
wire   [30:0] add_ln444_5_fu_2101_p2;
wire   [0:0] icmp_ln659_fu_2201_p2;
wire   [4:0] stackSize_7_fu_2229_p2;
wire   [4:0] stackSize_8_fu_2240_p2;
reg   [43:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
#0 call_count = 32'd0;
#0 total_flips = 32'd0;
#0 collected_triangles = 32'd0;
#0 grp_freeHalfEdge_fu_1141_ap_start_reg = 1'b0;
#0 grp_assignTriangleToGrid_fu_1154_ap_start_reg = 1'b0;
end

tri2d_legalizeEdge_edgeStack_V_RAM_AUTO_1R1W #(
    .DataWidth( 15 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
edgeStack_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeStack_V_address0),
    .ce0(edgeStack_V_ce0),
    .we0(edgeStack_V_we0),
    .d0(edgeStack_V_d0),
    .q0(edgeStack_V_q0),
    .address1(edgeStack_V_address1),
    .ce1(edgeStack_V_ce1),
    .we1(edgeStack_V_we1),
    .d1(edgeStack_V_d1)
);

tri2d_legalizeEdge_faceStack_V_RAM_AUTO_1R1W #(
    .DataWidth( 14 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
faceStack_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(faceStack_V_address0),
    .ce0(faceStack_V_ce0),
    .we0(faceStack_V_we0),
    .d0(faceStack_V_d0),
    .q0(faceStack_V_q0),
    .address1(faceStack_V_address1),
    .ce1(faceStack_V_ce1),
    .we1(faceStack_V_we1),
    .d1(faceStack_V_d1)
);

tri2d_freeHalfEdge grp_freeHalfEdge_fu_1141(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_freeHalfEdge_fu_1141_ap_start),
    .ap_done(grp_freeHalfEdge_fu_1141_ap_done),
    .ap_idle(grp_freeHalfEdge_fu_1141_ap_idle),
    .ap_ready(grp_freeHalfEdge_fu_1141_ap_ready),
    .edgeId(grp_freeHalfEdge_fu_1141_edgeId),
    .he_used_V_address0(grp_freeHalfEdge_fu_1141_he_used_V_address0),
    .he_used_V_ce0(grp_freeHalfEdge_fu_1141_he_used_V_ce0),
    .he_used_V_we0(grp_freeHalfEdge_fu_1141_he_used_V_we0),
    .he_used_V_d0(grp_freeHalfEdge_fu_1141_he_used_V_d0),
    .freeEdgeCount_i(freeEdgeCount_i),
    .freeEdgeCount_o(grp_freeHalfEdge_fu_1141_freeEdgeCount_o),
    .freeEdgeCount_o_ap_vld(grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld),
    .freeEdges_V_address0(grp_freeHalfEdge_fu_1141_freeEdges_V_address0),
    .freeEdges_V_ce0(grp_freeHalfEdge_fu_1141_freeEdges_V_ce0),
    .freeEdges_V_we0(grp_freeHalfEdge_fu_1141_freeEdges_V_we0),
    .freeEdges_V_d0(grp_freeHalfEdge_fu_1141_freeEdges_V_d0),
    .replaceIdx_i(replaceIdx_i),
    .replaceIdx_o(grp_freeHalfEdge_fu_1141_replaceIdx_o),
    .replaceIdx_o_ap_vld(grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld)
);

tri2d_assignTriangleToGrid grp_assignTriangleToGrid_fu_1154(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_assignTriangleToGrid_fu_1154_ap_start),
    .ap_done(grp_assignTriangleToGrid_fu_1154_ap_done),
    .ap_idle(grp_assignTriangleToGrid_fu_1154_ap_idle),
    .ap_ready(grp_assignTriangleToGrid_fu_1154_ap_ready),
    .triangleIdx(grp_assignTriangleToGrid_fu_1154_triangleIdx),
    .face_used_V_address0(grp_assignTriangleToGrid_fu_1154_face_used_V_address0),
    .face_used_V_ce0(grp_assignTriangleToGrid_fu_1154_face_used_V_ce0),
    .face_used_V_q0(face_used_V_q0),
    .face_edge_V_address0(grp_assignTriangleToGrid_fu_1154_face_edge_V_address0),
    .face_edge_V_ce0(grp_assignTriangleToGrid_fu_1154_face_edge_V_ce0),
    .face_edge_V_q0(face_edge_V_q0),
    .he_tail_V_address0(grp_assignTriangleToGrid_fu_1154_he_tail_V_address0),
    .he_tail_V_ce0(grp_assignTriangleToGrid_fu_1154_he_tail_V_ce0),
    .he_tail_V_q0(he_tail_V_q0),
    .he_next_V_address0(grp_assignTriangleToGrid_fu_1154_he_next_V_address0),
    .he_next_V_ce0(grp_assignTriangleToGrid_fu_1154_he_next_V_ce0),
    .he_next_V_q0(he_next_V_q0),
    .vertex_x_V_address0(grp_assignTriangleToGrid_fu_1154_vertex_x_V_address0),
    .vertex_x_V_ce0(grp_assignTriangleToGrid_fu_1154_vertex_x_V_ce0),
    .vertex_x_V_q0(vertex_x_V_q0),
    .vertex_x_V_address1(grp_assignTriangleToGrid_fu_1154_vertex_x_V_address1),
    .vertex_x_V_ce1(grp_assignTriangleToGrid_fu_1154_vertex_x_V_ce1),
    .vertex_x_V_q1(vertex_x_V_q1),
    .vertex_y_V_address0(grp_assignTriangleToGrid_fu_1154_vertex_y_V_address0),
    .vertex_y_V_ce0(grp_assignTriangleToGrid_fu_1154_vertex_y_V_ce0),
    .vertex_y_V_q0(vertex_y_V_q0),
    .vertex_y_V_address1(grp_assignTriangleToGrid_fu_1154_vertex_y_V_address1),
    .vertex_y_V_ce1(grp_assignTriangleToGrid_fu_1154_vertex_y_V_ce1),
    .vertex_y_V_q1(vertex_y_V_q1),
    .enhanced_grid_grid_size_x(enhanced_grid_grid_size_x),
    .enhanced_grid_x_min_V(enhanced_grid_x_min_V),
    .enhanced_grid_cell_width_V(enhanced_grid_cell_width_V),
    .enhanced_grid_grid_size_y(enhanced_grid_grid_size_y),
    .enhanced_grid_y_min_V(enhanced_grid_y_min_V),
    .enhanced_grid_cell_height_V(enhanced_grid_cell_height_V),
    .enhanced_grid_total_cells(enhanced_grid_total_cells),
    .enhanced_grid_flat_cells_triangle_count_address0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_address0),
    .enhanced_grid_flat_cells_triangle_count_ce0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_ce0),
    .enhanced_grid_flat_cells_triangle_count_we0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_we0),
    .enhanced_grid_flat_cells_triangle_count_d0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_d0),
    .enhanced_grid_flat_cells_triangle_count_q0(enhanced_grid_flat_cells_triangle_count_q0),
    .enhanced_grid_flat_cells_triangles_V_address0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_address0),
    .enhanced_grid_flat_cells_triangles_V_ce0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_ce0),
    .enhanced_grid_flat_cells_triangles_V_we0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_we0),
    .enhanced_grid_flat_cells_triangles_V_d0(grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_d0),
    .enhanced_grid_flat_cells_triangles_V_q0(enhanced_grid_flat_cells_triangles_V_q0)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U193(
    .din0(r_V_19_fu_1575_p0),
    .din1(r_V_19_fu_1575_p1),
    .dout(r_V_19_fu_1575_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U194(
    .din0(r_V_21_fu_1595_p0),
    .din1(r_V_21_fu_1595_p1),
    .dout(r_V_21_fu_1595_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U195(
    .din0(r_V_23_fu_1615_p0),
    .din1(r_V_23_fu_1615_p1),
    .dout(r_V_23_fu_1615_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U196(
    .din0(r_V_25_fu_1635_p0),
    .din1(r_V_25_fu_1635_p1),
    .dout(r_V_25_fu_1635_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U197(
    .din0(r_V_27_fu_1655_p0),
    .din1(r_V_27_fu_1655_p1),
    .dout(r_V_27_fu_1655_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U198(
    .din0(r_V_29_fu_1675_p0),
    .din1(r_V_29_fu_1675_p1),
    .dout(r_V_29_fu_1675_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U199(
    .din0(r_V_fu_1705_p0),
    .din1(r_V_fu_1705_p1),
    .dout(r_V_fu_1705_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U200(
    .din0(r_V_40_fu_1711_p0),
    .din1(r_V_40_fu_1711_p1),
    .dout(r_V_40_fu_1711_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U201(
    .din0(r_V_41_fu_1745_p0),
    .din1(r_V_41_fu_1745_p1),
    .dout(r_V_41_fu_1745_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U202(
    .din0(r_V_42_fu_1751_p0),
    .din1(r_V_42_fu_1751_p1),
    .dout(r_V_42_fu_1751_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U203(
    .din0(r_V_43_fu_1785_p0),
    .din1(r_V_43_fu_1785_p1),
    .dout(r_V_43_fu_1785_p2)
);

tri2d_mul_32s_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_1_1_U204(
    .din0(r_V_44_fu_1791_p0),
    .din1(r_V_44_fu_1791_p1),
    .dout(r_V_44_fu_1791_p2)
);

tri2d_mul_64s_48s_102_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 102 ))
mul_64s_48s_102_1_1_U205(
    .din0(ret_V_45_reg_2557),
    .din1(ret_V_57_reg_2552),
    .dout(r_V_31_fu_1817_p2)
);

tri2d_mul_64s_48s_102_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 102 ))
mul_64s_48s_102_1_1_U206(
    .din0(ret_V_47_reg_2567),
    .din1(ret_V_58_reg_2562),
    .dout(r_V_35_fu_1829_p2)
);

tri2d_mul_64s_48s_102_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 102 ))
mul_64s_48s_102_1_1_U207(
    .din0(ret_V_49_reg_2577),
    .din1(ret_V_59_reg_2572),
    .dout(r_V_39_fu_1847_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_assignTriangleToGrid_fu_1154_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40))) begin
            grp_assignTriangleToGrid_fu_1154_ap_start_reg <= 1'b1;
        end else if ((grp_assignTriangleToGrid_fu_1154_ap_ready == 1'b1)) begin
            grp_assignTriangleToGrid_fu_1154_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_freeHalfEdge_fu_1141_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
            grp_freeHalfEdge_fu_1141_ap_start_reg <= 1'b1;
        end else if ((grp_freeHalfEdge_fu_1141_ap_ready == 1'b1)) begin
            grp_freeHalfEdge_fu_1141_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e1_V_1_fu_142 <= newEdgeIdx_V_read;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        e1_V_1_fu_142 <= newEdgeIdx_6_reg_1131;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        e1_V_2_reg_965 <= e1_V_1_fu_142;
    end else if (((icmp_ln443_reg_2658 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        e1_V_2_reg_965 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        e2_V_1_reg_946 <= add_ln840_1_fu_1914_p2;
    end else if (((icmp_ln443_reg_2658 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        e2_V_1_reg_946 <= e1_V_1_fu_142;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_1_fu_1930_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        e2_V_8_reg_1001 <= ap_phi_mux_e2_V_1_phi_fu_949_p4;
    end else if (((icmp_ln443_1_reg_2677 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        e2_V_8_reg_1001 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_1_fu_1930_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        e3_V_1_reg_981 <= add_ln840_2_fu_1936_p2;
    end else if (((icmp_ln443_1_reg_2677 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        e3_V_1_reg_981 <= e2_V_1_reg_946;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_2_fu_1963_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        e3_V_3_reg_1016 <= ap_phi_mux_e3_V_1_phi_fu_984_p4;
    end else if (((icmp_ln443_2_reg_2701 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        e3_V_3_reg_1016 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_2_fu_1963_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        e4_V_1_reg_1032 <= add_ln840_3_fu_1969_p2;
    end else if (((icmp_ln443_2_reg_2701 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        e4_V_1_reg_1032 <= e3_V_1_reg_981;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        e4_V_3_reg_1063 <= e4_V_1_reg_1032;
    end else if (((icmp_ln443_3_reg_2735 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        e4_V_3_reg_1063 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        e5_V_1_reg_1043 <= add_ln840_fu_2039_p2;
    end else if (((icmp_ln443_3_reg_2735 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        e5_V_1_reg_1043 <= e4_V_1_reg_1032;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_4_fu_2056_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        e5_V_3_reg_1100 <= ap_phi_mux_e5_V_1_phi_fu_1046_p4;
    end else if (((icmp_ln443_4_reg_2754 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        e5_V_3_reg_1100 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_4_fu_2056_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        e6_V_1_reg_1080 <= add_ln840_5_fu_2062_p2;
    end else if (((icmp_ln443_4_reg_2754 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        e6_V_1_reg_1080 <= e5_V_1_reg_1043;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_5_fu_2089_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        e6_V_3_reg_1116 <= ap_phi_mux_e6_V_1_phi_fu_1083_p4;
    end else if (((icmp_ln443_5_reg_2778 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        e6_V_3_reg_1116 <= freeEdges_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_1_fu_1930_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        empty_69_reg_992 <= freeEdgeCount_i;
    end else if (((icmp_ln443_1_reg_2677 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        empty_69_reg_992 <= add_ln444_1_reg_2691;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        empty_70_reg_1054 <= freeEdgeCount_i;
    end else if (((icmp_ln443_3_reg_2735 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        empty_70_reg_1054 <= add_ln444_3_reg_2744;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_4_fu_2056_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        empty_71_reg_1091 <= freeEdgeCount_i;
    end else if (((icmp_ln443_4_reg_2754 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        empty_71_reg_1091 <= add_ln444_4_reg_2768;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        empty_reg_956 <= freeEdgeCount_i;
    end else if (((icmp_ln443_reg_2658 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        empty_reg_956 <= add_ln444_reg_2667;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        flip_count_fu_146 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        flip_count_fu_146 <= flip_count_3_reg_2630;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_5_fu_2089_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        newEdgeIdx_6_reg_1131 <= add_ln840_6_fu_2095_p2;
    end else if (((icmp_ln443_5_reg_2778 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        newEdgeIdx_6_reg_1131 <= e6_V_1_reg_1080;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        stackSize_fu_138 <= zext_ln539_fu_1223_p1;
    end else if (((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'd1 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43))) begin
        stackSize_fu_138 <= stackSize_9_fu_2196_p2;
    end else if ((((icmp_ln1019_fu_1305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((result_fu_1869_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'd0 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == ap_CS_fsm_state9) & ((face_used_V_q0 == 1'd0) | (icmp_ln1019_1_reg_2442 == 1'd1))) | ((1'b1 == ap_CS_fsm_state5) & ((face_used_V_q0 == 1'd0) | (he_used_V_load_reg_2335 == 1'd0))))) begin
        stackSize_fu_138 <= stackSize_6_reg_2296;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_1_fu_1930_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        add_ln444_1_reg_2691 <= add_ln444_1_fu_1942_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
        add_ln444_3_reg_2744 <= grp_fu_1199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_4_fu_2056_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        add_ln444_4_reg_2768 <= add_ln444_4_fu_2068_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        add_ln444_reg_2667 <= grp_fu_1199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        and_ln659_reg_2816 <= and_ln659_fu_2207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((face_used_V_q0 == 1'd1) & (icmp_ln1019_1_reg_2442 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        call_count <= add_ln341_fu_1333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        collected_triangles <= add_ln656_fu_2131_p2;
        icmp_ln659_1_reg_2792 <= icmp_ln659_1_fu_2143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        currentEdge_V_reg_2317 <= edgeStack_V_q0;
        zext_ln541_reg_2322[14 : 0] <= zext_ln541_fu_1281_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        e2_V_4_reg_2596 <= he_twin_V_q1;
        e2_V_5_reg_2602 <= he_twin_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        e2_V_6_reg_2618 <= he_twin_V_q0;
        e2_V_7_reg_2624 <= he_twin_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln547_fu_1263_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        edgeStack_V_addr_1_reg_2305 <= zext_ln550_fu_1275_p1;
        faceStack_V_addr_1_reg_2311 <= zext_ln550_fu_1275_p1;
        stackSize_6_reg_2296 <= stackSize_6_fu_1269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        f1_new_V_reg_2636 <= tri_num_V_i;
        f2_new_V_reg_2644 <= f2_new_V_fu_1908_p2;
        flip_count_3_reg_2630 <= flip_count_3_fu_1899_p2;
        icmp_ln443_reg_2658 <= grp_fu_1193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1019_1_fu_1318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        face_used_V_addr_1_reg_2446 <= zext_ln541_17_fu_1324_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((he_used_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        face_used_V_addr_reg_2339 <= zext_ln541_13_fu_1286_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1019_1_reg_2442 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        face_used_V_load_1_reg_2451 <= face_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((he_used_V_load_reg_2335 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        face_used_V_load_reg_2344 <= face_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        he_used_V_load_reg_2335 <= he_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln1019_1_reg_2442 <= icmp_ln1019_1_fu_1318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln1019_reg_2427 <= icmp_ln1019_fu_1305_p2;
        v2_V_reg_2412 <= he_tail_V_q1;
        v3_V_reg_2419 <= he_tail_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln443_1_reg_2677 <= icmp_ln443_1_fu_1930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        icmp_ln443_2_reg_2701 <= icmp_ln443_2_fu_1963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        icmp_ln443_3_reg_2735 <= grp_fu_1193_p2;
        zext_ln541_27_reg_2725[14 : 0] <= zext_ln541_27_fu_2030_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        icmp_ln443_4_reg_2754 <= icmp_ln443_4_fu_2056_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        icmp_ln443_5_reg_2778 <= icmp_ln443_5_fu_2089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        nextEdge_V_reg_2375 <= he_next_V_q0;
        prevEdge_V_reg_2390 <= he_prev_V_q0;
        twinEdge_V_reg_2405 <= he_twin_V_q0;
        v1_V_reg_2368 <= he_tail_V_q0;
        zext_ln541_14_reg_2380[14 : 0] <= zext_ln541_14_fu_1295_p1[14 : 0];
        zext_ln541_15_reg_2395[14 : 0] <= zext_ln541_15_fu_1300_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_x_V_11_reg_2522 <= vertex_x_V_q0;
        p_x_V_reg_2512 <= vertex_x_V_q1;
        p_y_V_12_reg_2527 <= vertex_y_V_q0;
        p_y_V_reg_2517 <= vertex_y_V_q1;
        v4_V_reg_2506 <= he_tail_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        result_reg_2582 <= result_fu_1869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ret_V_45_reg_2557 <= ret_V_45_fu_1725_p2;
        ret_V_47_reg_2567 <= ret_V_47_fu_1765_p2;
        ret_V_49_reg_2577 <= ret_V_49_fu_1805_p2;
        ret_V_57_reg_2552 <= ret_V_57_fu_1699_p2;
        ret_V_58_reg_2562 <= ret_V_58_fu_1739_p2;
        ret_V_59_reg_2572 <= ret_V_59_fu_1779_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        stackSize_5_reg_2280 <= stackSize_fu_138;
    end
end

always @ (posedge ap_clk) begin
    if (((result_fu_1869_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        total_flips <= add_ln590_fu_1883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43))) begin
        trunc_ln539_reg_2820 <= trunc_ln539_fu_2221_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        twinNextEdge_V_reg_2465 <= he_next_V_q0;
        twinPrevEdge_V_reg_2471 <= he_prev_V_q0;
        zext_ln541_18_reg_2476[14 : 0] <= zext_ln541_18_fu_1349_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1019_fu_1305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln541_16_reg_2431[14 : 0] <= zext_ln541_16_fu_1310_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        zext_ln541_25_reg_2715[14 : 0] <= zext_ln541_25_fu_2001_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        zext_ln541_26_reg_2720[14 : 0] <= zext_ln541_26_fu_2021_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        zext_ln541_29_reg_2806[14 : 0] <= zext_ln541_29_fu_2162_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        zext_ln541_30_reg_2811[14 : 0] <= zext_ln541_30_fu_2175_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        zext_ln541_31_reg_2797[14 : 0] <= zext_ln541_31_fu_2152_p1[14 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_freeHalfEdge_fu_1141_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_freeHalfEdge_fu_1141_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((grp_freeHalfEdge_fu_1141_ap_done == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((grp_freeHalfEdge_fu_1141_ap_done == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((grp_freeHalfEdge_fu_1141_ap_done == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if ((grp_freeHalfEdge_fu_1141_ap_done == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

always @ (*) begin
    if ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'd0 == and_ln547_fu_1263_p2) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_2658 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        ap_phi_mux_e2_V_1_phi_fu_949_p4 = e1_V_1_fu_142;
    end else begin
        ap_phi_mux_e2_V_1_phi_fu_949_p4 = e2_V_1_reg_946;
    end
end

always @ (*) begin
    if (((icmp_ln443_1_reg_2677 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_phi_mux_e3_V_1_phi_fu_984_p4 = e2_V_1_reg_946;
    end else begin
        ap_phi_mux_e3_V_1_phi_fu_984_p4 = e3_V_1_reg_981;
    end
end

always @ (*) begin
    if (((icmp_ln443_2_reg_2701 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_phi_mux_e3_V_3_phi_fu_1022_p4 = freeEdges_V_q0;
    end else begin
        ap_phi_mux_e3_V_3_phi_fu_1022_p4 = e3_V_3_reg_1016;
    end
end

always @ (*) begin
    if (((icmp_ln443_3_reg_2735 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_phi_mux_e5_V_1_phi_fu_1046_p4 = e4_V_1_reg_1032;
    end else begin
        ap_phi_mux_e5_V_1_phi_fu_1046_p4 = e5_V_1_reg_1043;
    end
end

always @ (*) begin
    if (((icmp_ln443_4_reg_2754 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_phi_mux_e6_V_1_phi_fu_1083_p4 = e5_V_1_reg_1043;
    end else begin
        ap_phi_mux_e6_V_1_phi_fu_1083_p4 = e6_V_1_reg_1080;
    end
end

always @ (*) begin
    if (((icmp_ln443_5_reg_2778 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_phi_mux_e6_V_3_phi_fu_1121_p4 = freeEdges_V_q0;
    end else begin
        ap_phi_mux_e6_V_3_phi_fu_1121_p4 = e6_V_3_reg_1116;
    end
end

always @ (*) begin
    if (((icmp_ln443_1_reg_2677 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_phi_mux_empty_69_phi_fu_995_p4 = add_ln444_1_reg_2691;
    end else begin
        ap_phi_mux_empty_69_phi_fu_995_p4 = empty_69_reg_992;
    end
end

always @ (*) begin
    if (((icmp_ln443_3_reg_2735 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_phi_mux_empty_70_phi_fu_1057_p4 = add_ln444_3_reg_2744;
    end else begin
        ap_phi_mux_empty_70_phi_fu_1057_p4 = empty_70_reg_1054;
    end
end

always @ (*) begin
    if (((icmp_ln443_4_reg_2754 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_phi_mux_empty_71_phi_fu_1094_p4 = add_ln444_4_reg_2768;
    end else begin
        ap_phi_mux_empty_71_phi_fu_1094_p4 = empty_71_reg_1091;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_2658 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        ap_phi_mux_empty_phi_fu_959_p4 = add_ln444_reg_2667;
    end else begin
        ap_phi_mux_empty_phi_fu_959_p4 = empty_reg_956;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((or_ln540_fu_1217_p2 == 1'd0)) begin
            ap_phi_mux_stackSize_ph_phi_fu_938_p4 = 1'd1;
        end else if ((or_ln540_fu_1217_p2 == 1'd1)) begin
            ap_phi_mux_stackSize_ph_phi_fu_938_p4 = 1'd0;
        end else begin
            ap_phi_mux_stackSize_ph_phi_fu_938_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_stackSize_ph_phi_fu_938_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln547_fu_1263_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        edgeStack_V_address0 = zext_ln668_fu_2234_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        edgeStack_V_address0 = zext_ln664_fu_2216_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edgeStack_V_address0 = zext_ln550_fu_1275_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        edgeStack_V_address0 = 64'd0;
    end else begin
        edgeStack_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        edgeStack_V_address1 = zext_ln672_fu_2245_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        edgeStack_V_address1 = edgeStack_V_addr_1_reg_2305;
    end else begin
        edgeStack_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state2) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        edgeStack_V_ce0 = 1'b1;
    end else begin
        edgeStack_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        edgeStack_V_ce1 = 1'b1;
    end else begin
        edgeStack_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        edgeStack_V_d0 = e4_V_3_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        edgeStack_V_d0 = e3_V_3_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        edgeStack_V_d0 = edgeIdx;
    end else begin
        edgeStack_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        edgeStack_V_d1 = e5_V_3_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        edgeStack_V_d1 = e1_V_2_reg_965;
    end else begin
        edgeStack_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'd1 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43)) | ((result_reg_2582 == 1'd1) & (face_used_V_load_1_reg_2451 == 1'd1) & (icmp_ln1019_1_reg_2442 == 1'd0) & (icmp_ln1019_reg_2427 == 1'd0) & (face_used_V_load_reg_2344 == 1'd1) & (he_used_V_load_reg_2335 == 1'd1) & (1'd1 == and_ln659_reg_2816) & (1'b1 == ap_CS_fsm_state44)) | ((or_ln540_fu_1217_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        edgeStack_V_we0 = 1'b1;
    end else begin
        edgeStack_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'd1 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43)) | ((result_reg_2582 == 1'd1) & (face_used_V_load_1_reg_2451 == 1'd1) & (icmp_ln1019_1_reg_2442 == 1'd0) & (icmp_ln1019_reg_2427 == 1'd0) & (face_used_V_load_reg_2344 == 1'd1) & (he_used_V_load_reg_2335 == 1'd1) & (1'd1 == and_ln659_reg_2816) & (1'b1 == ap_CS_fsm_state44)))) begin
        edgeStack_V_we1 = 1'b1;
    end else begin
        edgeStack_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        enhanced_grid_flat_cells_triangle_count_ce0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_ce0;
    end else begin
        enhanced_grid_flat_cells_triangle_count_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        enhanced_grid_flat_cells_triangle_count_we0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_we0;
    end else begin
        enhanced_grid_flat_cells_triangle_count_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        enhanced_grid_flat_cells_triangles_V_ce0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_ce0;
    end else begin
        enhanced_grid_flat_cells_triangles_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        enhanced_grid_flat_cells_triangles_V_we0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_we0;
    end else begin
        enhanced_grid_flat_cells_triangles_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        faceStack_V_address0 = zext_ln668_fu_2234_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        faceStack_V_address0 = zext_ln664_fu_2216_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        faceStack_V_address0 = faceStack_V_addr_1_reg_2311;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        faceStack_V_address0 = 64'd0;
    end else begin
        faceStack_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        faceStack_V_address1 = zext_ln672_fu_2245_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        faceStack_V_address1 = faceStack_V_addr_1_reg_2311;
    end else begin
        faceStack_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state3) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        faceStack_V_ce0 = 1'b1;
    end else begin
        faceStack_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        faceStack_V_ce1 = 1'b1;
    end else begin
        faceStack_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        faceStack_V_d0 = f2_new_V_reg_2644;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        faceStack_V_d0 = f1_new_V_reg_2636;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        faceStack_V_d0 = faceIdx;
    end else begin
        faceStack_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        faceStack_V_d1 = f2_new_V_reg_2644;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        faceStack_V_d1 = f1_new_V_reg_2636;
    end else begin
        faceStack_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'd1 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43)) | ((result_reg_2582 == 1'd1) & (face_used_V_load_1_reg_2451 == 1'd1) & (icmp_ln1019_1_reg_2442 == 1'd0) & (icmp_ln1019_reg_2427 == 1'd0) & (face_used_V_load_reg_2344 == 1'd1) & (he_used_V_load_reg_2335 == 1'd1) & (1'd1 == and_ln659_reg_2816) & (1'b1 == ap_CS_fsm_state44)) | ((or_ln540_fu_1217_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        faceStack_V_we0 = 1'b1;
    end else begin
        faceStack_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'd1 == and_ln659_fu_2207_p2) & (1'b1 == ap_CS_fsm_state43)) | ((result_reg_2582 == 1'd1) & (face_used_V_load_1_reg_2451 == 1'd1) & (icmp_ln1019_1_reg_2442 == 1'd0) & (icmp_ln1019_reg_2427 == 1'd0) & (face_used_V_load_reg_2344 == 1'd1) & (he_used_V_load_reg_2335 == 1'd1) & (1'd1 == and_ln659_reg_2816) & (1'b1 == ap_CS_fsm_state44)))) begin
        faceStack_V_we1 = 1'b1;
    end else begin
        faceStack_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        face_edge_V_address0 = zext_ln541_28_fu_2122_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        face_edge_V_address0 = zext_ln541_24_fu_1996_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        face_edge_V_address0 = grp_assignTriangleToGrid_fu_1154_face_edge_V_address0;
    end else begin
        face_edge_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29))) begin
        face_edge_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        face_edge_V_ce0 = grp_assignTriangleToGrid_fu_1154_face_edge_V_ce0;
    end else begin
        face_edge_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        face_edge_V_d0 = e4_V_3_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        face_edge_V_d0 = e1_V_2_reg_965;
    end else begin
        face_edge_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29))) begin
        face_edge_V_we0 = 1'b1;
    end else begin
        face_edge_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        face_used_V_address0 = zext_ln541_28_fu_2122_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        face_used_V_address0 = zext_ln541_24_fu_1996_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        face_used_V_address0 = face_used_V_addr_1_reg_2446;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        face_used_V_address0 = face_used_V_addr_reg_2339;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        face_used_V_address0 = zext_ln541_17_fu_1324_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        face_used_V_address0 = zext_ln541_13_fu_1286_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        face_used_V_address0 = grp_assignTriangleToGrid_fu_1154_face_used_V_address0;
    end else begin
        face_used_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        face_used_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        face_used_V_ce0 = grp_assignTriangleToGrid_fu_1154_face_used_V_ce0;
    end else begin
        face_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29))) begin
        face_used_V_d0 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        face_used_V_d0 = 1'd0;
    end else begin
        face_used_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state14) | ((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        face_used_V_we0 = 1'b1;
    end else begin
        face_used_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_1_fu_1930_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        freeEdgeCount_o = add_ln444_1_fu_1942_p2;
    end else if (((icmp_ln443_2_fu_1963_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        freeEdgeCount_o = zext_ln444_6_fu_1981_p1;
    end else if ((((grp_fu_1193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_fu_1193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        freeEdgeCount_o = grp_fu_1199_p2;
    end else if (((icmp_ln443_4_fu_2056_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        freeEdgeCount_o = add_ln444_4_fu_2068_p2;
    end else if (((icmp_ln443_5_fu_2089_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        freeEdgeCount_o = zext_ln444_7_fu_2107_p1;
    end else if ((((grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        freeEdgeCount_o = grp_freeHalfEdge_fu_1141_freeEdgeCount_o;
    end else begin
        freeEdgeCount_o = freeEdgeCount_i;
    end
end

always @ (*) begin
    if ((((icmp_ln443_5_fu_2089_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)) | ((icmp_ln443_4_fu_2056_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln443_2_fu_1963_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | ((icmp_ln443_1_fu_1930_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_fu_1193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_fu_1193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        freeEdgeCount_o_ap_vld = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        freeEdgeCount_o_ap_vld = grp_freeHalfEdge_fu_1141_freeEdgeCount_o_ap_vld;
    end else begin
        freeEdgeCount_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        freeEdges_V_address0 = zext_ln444_5_fu_2117_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        freeEdges_V_address0 = zext_ln444_4_fu_2080_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        freeEdges_V_address0 = zext_ln444_3_fu_2051_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        freeEdges_V_address0 = zext_ln444_2_fu_1991_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        freeEdges_V_address0 = zext_ln444_1_fu_1954_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        freeEdges_V_address0 = zext_ln444_fu_1925_p1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        freeEdges_V_address0 = grp_freeHalfEdge_fu_1141_freeEdges_V_address0;
    end else begin
        freeEdges_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        freeEdges_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        freeEdges_V_ce0 = grp_freeHalfEdge_fu_1141_freeEdges_V_ce0;
    end else begin
        freeEdges_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        freeEdges_V_we0 = grp_freeHalfEdge_fu_1141_freeEdges_V_we0;
    end else begin
        freeEdges_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_assignTriangleToGrid_fu_1154_triangleIdx = f2_new_V_reg_2644;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_assignTriangleToGrid_fu_1154_triangleIdx = f1_new_V_reg_2636;
    end else begin
        grp_assignTriangleToGrid_fu_1154_triangleIdx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_freeHalfEdge_fu_1141_edgeId = twinPrevEdge_V_reg_2471;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_freeHalfEdge_fu_1141_edgeId = twinNextEdge_V_reg_2465;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_freeHalfEdge_fu_1141_edgeId = twinEdge_V_reg_2405;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_freeHalfEdge_fu_1141_edgeId = prevEdge_V_reg_2390;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_freeHalfEdge_fu_1141_edgeId = nextEdge_V_reg_2375;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_freeHalfEdge_fu_1141_edgeId = currentEdge_V_reg_2317;
    end else begin
        grp_freeHalfEdge_fu_1141_edgeId = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_face_V_address0 = zext_ln541_31_reg_2797;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_face_V_address0 = zext_ln541_30_fu_2175_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_face_V_address0 = zext_ln541_29_fu_2162_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_face_V_address0 = zext_ln541_27_fu_2030_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_face_V_address0 = zext_ln541_26_fu_2021_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_face_V_address0 = zext_ln541_25_fu_2001_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        he_face_V_address0 = zext_ln541_16_fu_1310_p1;
    end else begin
        he_face_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7))) begin
        he_face_V_ce0 = 1'b1;
    end else begin
        he_face_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        he_face_V_d0 = f2_new_V_reg_2644;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30))) begin
        he_face_V_d0 = f1_new_V_reg_2636;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_face_V_d0 = tri_num_V_i;
    end else begin
        he_face_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        he_face_V_we0 = 1'b1;
    end else begin
        he_face_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_next_V_address0 = zext_ln541_31_reg_2797;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_next_V_address0 = zext_ln541_30_fu_2175_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_next_V_address0 = zext_ln541_29_fu_2162_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_next_V_address0 = zext_ln541_27_fu_2030_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_next_V_address0 = zext_ln541_26_fu_2021_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_next_V_address0 = zext_ln541_25_fu_2001_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        he_next_V_address0 = zext_ln541_16_reg_2431;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_next_V_address0 = zext_ln541_reg_2322;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        he_next_V_address0 = grp_assignTriangleToGrid_fu_1154_he_next_V_address0;
    end else begin
        he_next_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        he_next_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        he_next_V_ce0 = grp_assignTriangleToGrid_fu_1154_he_next_V_ce0;
    end else begin
        he_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_next_V_d0 = e4_V_3_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_next_V_d0 = e6_V_3_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_next_V_d0 = e5_V_3_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_next_V_d0 = e1_V_2_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_next_V_d0 = e3_V_3_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_next_V_d0 = e2_V_8_reg_1001;
    end else begin
        he_next_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        he_next_V_we0 = 1'b1;
    end else begin
        he_next_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_prev_V_address0 = zext_ln541_31_reg_2797;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_prev_V_address0 = zext_ln541_30_fu_2175_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_prev_V_address0 = zext_ln541_29_fu_2162_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_prev_V_address0 = zext_ln541_27_fu_2030_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_prev_V_address0 = zext_ln541_26_fu_2021_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_prev_V_address0 = zext_ln541_25_fu_2001_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        he_prev_V_address0 = zext_ln541_16_reg_2431;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_prev_V_address0 = zext_ln541_reg_2322;
    end else begin
        he_prev_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        he_prev_V_ce0 = 1'b1;
    end else begin
        he_prev_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_prev_V_d0 = e5_V_3_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_prev_V_d0 = e4_V_3_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_prev_V_d0 = e6_V_3_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_prev_V_d0 = e2_V_8_reg_1001;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_prev_V_d0 = e1_V_2_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_prev_V_d0 = ap_phi_mux_e3_V_3_phi_fu_1022_p4;
    end else begin
        he_prev_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        he_prev_V_we0 = 1'b1;
    end else begin
        he_prev_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        he_tail_V_address0 = zext_ln541_30_fu_2175_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_tail_V_address0 = zext_ln541_27_fu_2030_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_tail_V_address0 = zext_ln541_25_fu_2001_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        he_tail_V_address0 = zext_ln541_15_fu_1300_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_tail_V_address0 = zext_ln541_reg_2322;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        he_tail_V_address0 = grp_assignTriangleToGrid_fu_1154_he_tail_V_address0;
    end else begin
        he_tail_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_tail_V_address1 = zext_ln541_31_reg_2797;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_tail_V_address1 = zext_ln541_29_fu_2162_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_tail_V_address1 = zext_ln541_26_fu_2021_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        he_tail_V_address1 = zext_ln541_18_fu_1349_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        he_tail_V_address1 = zext_ln541_14_fu_1295_p1;
    end else begin
        he_tail_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        he_tail_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        he_tail_V_ce0 = grp_assignTriangleToGrid_fu_1154_he_tail_V_ce0;
    end else begin
        he_tail_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        he_tail_V_ce1 = 1'b1;
    end else begin
        he_tail_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        he_tail_V_d0 = v2_V_reg_2412;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_tail_V_d0 = v3_V_reg_2419;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_tail_V_d0 = v1_V_reg_2368;
    end else begin
        he_tail_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_tail_V_d1 = v3_V_reg_2419;
    end else if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30))) begin
        he_tail_V_d1 = v4_V_reg_2506;
    end else begin
        he_tail_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29))) begin
        he_tail_V_we0 = 1'b1;
    end else begin
        he_tail_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30))) begin
        he_tail_V_we1 = 1'b1;
    end else begin
        he_tail_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        he_twin_V_address0 = zext_ln541_35_fu_2192_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        he_twin_V_address0 = zext_ln541_34_fu_2188_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        he_twin_V_address0 = zext_ln541_33_fu_2184_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_twin_V_address0 = zext_ln541_32_fu_2171_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        he_twin_V_address0 = zext_ln541_31_fu_2152_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        he_twin_V_address0 = zext_ln541_18_reg_2476;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        he_twin_V_address0 = zext_ln541_15_reg_2395;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        he_twin_V_address0 = zext_ln541_reg_2322;
    end else begin
        he_twin_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        he_twin_V_address1 = zext_ln541_30_reg_2811;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        he_twin_V_address1 = zext_ln541_29_reg_2806;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_twin_V_address1 = zext_ln541_27_reg_2725;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        he_twin_V_address1 = zext_ln541_25_reg_2715;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        he_twin_V_address1 = zext_ln541_26_reg_2720;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        he_twin_V_address1 = zext_ln541_14_reg_2380;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        he_twin_V_address1 = zext_ln541_23_fu_1895_p1;
    end else begin
        he_twin_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        he_twin_V_ce0 = 1'b1;
    end else begin
        he_twin_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        he_twin_V_ce1 = 1'b1;
    end else begin
        he_twin_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        he_twin_V_d0 = e5_V_3_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        he_twin_V_d0 = e4_V_3_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        he_twin_V_d0 = e3_V_3_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_twin_V_d0 = e1_V_2_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        he_twin_V_d0 = e2_V_8_reg_1001;
    end else begin
        he_twin_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        he_twin_V_d1 = e2_V_7_reg_2624;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        he_twin_V_d1 = e2_V_6_reg_2618;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_twin_V_d1 = e2_V_5_reg_2602;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        he_twin_V_d1 = e2_V_4_reg_2596;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        he_twin_V_d1 = ap_phi_mux_e6_V_3_phi_fu_1121_p4;
    end else begin
        he_twin_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        he_twin_V_we0 = 1'b1;
    end else begin
        he_twin_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34))) begin
        he_twin_V_we1 = 1'b1;
    end else begin
        he_twin_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        he_used_V_address0 = zext_ln541_31_reg_2797;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        he_used_V_address0 = zext_ln541_30_fu_2175_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        he_used_V_address0 = zext_ln541_29_fu_2162_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        he_used_V_address0 = zext_ln541_27_fu_2030_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        he_used_V_address0 = zext_ln541_26_fu_2021_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        he_used_V_address0 = zext_ln541_25_fu_2001_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        he_used_V_address0 = zext_ln541_fu_1281_p1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        he_used_V_address0 = grp_freeHalfEdge_fu_1141_he_used_V_address0;
    end else begin
        he_used_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state3))) begin
        he_used_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        he_used_V_ce0 = grp_freeHalfEdge_fu_1141_he_used_V_ce0;
    end else begin
        he_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        he_used_V_d0 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        he_used_V_d0 = grp_freeHalfEdge_fu_1141_he_used_V_d0;
    end else begin
        he_used_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        he_used_V_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        he_used_V_we0 = grp_freeHalfEdge_fu_1141_he_used_V_we0;
    end else begin
        he_used_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        replaceIdx_o = grp_freeHalfEdge_fu_1141_replaceIdx_o;
    end else begin
        replaceIdx_o = replaceIdx_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        replaceIdx_o_ap_vld = grp_freeHalfEdge_fu_1141_replaceIdx_o_ap_vld;
    end else begin
        replaceIdx_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tri_num_V_o = add_ln840_4_fu_2010_p2;
    end else begin
        tri_num_V_o = tri_num_V_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tri_num_V_o_ap_vld = 1'b1;
    end else begin
        tri_num_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vertex_x_V_address0 = zext_ln541_22_fu_1369_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vertex_x_V_address0 = zext_ln541_20_fu_1359_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_x_V_address0 = grp_assignTriangleToGrid_fu_1154_vertex_x_V_address0;
    end else begin
        vertex_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vertex_x_V_address1 = zext_ln541_21_fu_1364_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vertex_x_V_address1 = zext_ln541_19_fu_1354_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_x_V_address1 = grp_assignTriangleToGrid_fu_1154_vertex_x_V_address1;
    end else begin
        vertex_x_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        vertex_x_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_x_V_ce0 = grp_assignTriangleToGrid_fu_1154_vertex_x_V_ce0;
    end else begin
        vertex_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        vertex_x_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_x_V_ce1 = grp_assignTriangleToGrid_fu_1154_vertex_x_V_ce1;
    end else begin
        vertex_x_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vertex_y_V_address0 = zext_ln541_22_fu_1369_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vertex_y_V_address0 = zext_ln541_20_fu_1359_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_y_V_address0 = grp_assignTriangleToGrid_fu_1154_vertex_y_V_address0;
    end else begin
        vertex_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vertex_y_V_address1 = zext_ln541_21_fu_1364_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vertex_y_V_address1 = zext_ln541_19_fu_1354_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_y_V_address1 = grp_assignTriangleToGrid_fu_1154_vertex_y_V_address1;
    end else begin
        vertex_y_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        vertex_y_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_y_V_ce0 = grp_assignTriangleToGrid_fu_1154_vertex_y_V_ce0;
    end else begin
        vertex_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        vertex_y_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43))) begin
        vertex_y_V_ce1 = grp_assignTriangleToGrid_fu_1154_vertex_y_V_ce1;
    end else begin
        vertex_y_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd0 == and_ln547_fu_1263_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((face_used_V_q0 == 1'd0) | (he_used_V_load_reg_2335 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln1019_fu_1305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & ((face_used_V_q0 == 1'd0) | (icmp_ln1019_1_reg_2442 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((result_fu_1869_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_freeHalfEdge_fu_1141_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_assignTriangleToGrid_fu_1154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_V_fu_1469_p3 = {{ret_V_51_fu_1463_p2}, {7'd0}};

assign a2_V_fu_1491_p3 = {{ret_V_52_fu_1485_p2}, {7'd0}};

assign add_ln341_fu_1333_p2 = (call_count + 32'd1);

assign add_ln444_1_fu_1942_p2 = ($signed(ap_phi_mux_empty_phi_fu_959_p4) + $signed(32'd4294967295));

assign add_ln444_2_fu_1975_p2 = ($signed(trunc_ln615_fu_1959_p1) + $signed(31'd2147483647));

assign add_ln444_4_fu_2068_p2 = ($signed(ap_phi_mux_empty_70_phi_fu_1057_p4) + $signed(32'd4294967295));

assign add_ln444_5_fu_2101_p2 = ($signed(trunc_ln630_fu_2085_p1) + $signed(31'd2147483647));

assign add_ln590_fu_1883_p2 = (total_flips + 32'd1);

assign add_ln656_fu_2131_p2 = (collected_triangles + 32'd2);

assign add_ln840_1_fu_1914_p2 = (e1_V_1_fu_142 + 15'd1);

assign add_ln840_2_fu_1936_p2 = (ap_phi_mux_e2_V_1_phi_fu_949_p4 + 15'd1);

assign add_ln840_3_fu_1969_p2 = (ap_phi_mux_e3_V_1_phi_fu_984_p4 + 15'd1);

assign add_ln840_4_fu_2010_p2 = (tri_num_V_i + 14'd2);

assign add_ln840_5_fu_2062_p2 = (ap_phi_mux_e5_V_1_phi_fu_1046_p4 + 15'd1);

assign add_ln840_6_fu_2095_p2 = (ap_phi_mux_e6_V_1_phi_fu_1083_p4 + 15'd1);

assign add_ln840_fu_2039_p2 = (e4_V_1_reg_1032 + 15'd1);

assign and_ln547_fu_1263_p2 = (icmp_ln547_fu_1251_p2 & icmp_ln547_1_fu_1257_p2);

assign and_ln659_fu_2207_p2 = (icmp_ln659_fu_2201_p2 & icmp_ln659_1_reg_2792);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = e1_V_1_fu_142;

assign b1_V_fu_1509_p3 = {{ret_V_53_fu_1503_p2}, {7'd0}};

assign b2_V_fu_1527_p3 = {{ret_V_54_fu_1521_p2}, {7'd0}};

assign c1_V_fu_1545_p3 = {{ret_V_55_fu_1539_p2}, {7'd0}};

assign c2_V_fu_1563_p3 = {{ret_V_56_fu_1557_p2}, {7'd0}};

assign det_V_fu_1859_p4 = {{ret_V_50_fu_1853_p2[101:54]}};

assign enhanced_grid_flat_cells_triangle_count_address0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_address0;

assign enhanced_grid_flat_cells_triangle_count_d0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangle_count_d0;

assign enhanced_grid_flat_cells_triangles_V_address0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_address0;

assign enhanced_grid_flat_cells_triangles_V_d0 = grp_assignTriangleToGrid_fu_1154_enhanced_grid_flat_cells_triangles_V_d0;

assign f2_new_V_fu_1908_p2 = (tri_num_V_i + 14'd1);

assign flip_count_3_fu_1899_p2 = (flip_count_fu_146 + 32'd1);

assign freeEdges_V_d0 = grp_freeHalfEdge_fu_1141_freeEdges_V_d0;

assign grp_assignTriangleToGrid_fu_1154_ap_start = grp_assignTriangleToGrid_fu_1154_ap_start_reg;

assign grp_freeHalfEdge_fu_1141_ap_start = grp_freeHalfEdge_fu_1141_ap_start_reg;

assign grp_fu_1193_p2 = (($signed(freeEdgeCount_i) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign grp_fu_1199_p2 = ($signed(freeEdgeCount_i) + $signed(32'd4294967295));

assign icmp_ln1019_1_fu_1318_p2 = ((he_face_V_q0 == 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_1305_p2 = ((twinEdge_V_reg_2405 == 15'd32767) ? 1'b1 : 1'b0);

assign icmp_ln1023_1_fu_1211_p2 = ((faceIdx == 14'd16383) ? 1'b1 : 1'b0);

assign icmp_ln1023_fu_1205_p2 = ((edgeIdx == 15'd32767) ? 1'b1 : 1'b0);

assign icmp_ln1027_3_fu_1394_p2 = ((v2_V_reg_2412 < 13'd5003) ? 1'b1 : 1'b0);

assign icmp_ln1027_4_fu_1413_p2 = ((v3_V_reg_2419 < 13'd5003) ? 1'b1 : 1'b0);

assign icmp_ln1027_5_fu_1434_p2 = ((v4_V_reg_2506 < 13'd5003) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_1375_p2 = ((v1_V_reg_2368 < 13'd5003) ? 1'b1 : 1'b0);

assign icmp_ln443_1_fu_1930_p2 = (($signed(ap_phi_mux_empty_phi_fu_959_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln443_2_fu_1963_p2 = (($signed(ap_phi_mux_empty_69_phi_fu_995_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln443_4_fu_2056_p2 = (($signed(ap_phi_mux_empty_70_phi_fu_1057_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln443_5_fu_2089_p2 = (($signed(ap_phi_mux_empty_71_phi_fu_1094_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln547_1_fu_1257_p2 = (($signed(flip_count_fu_146) < $signed(32'd20)) ? 1'b1 : 1'b0);

assign icmp_ln547_fu_1251_p2 = (($signed(stackSize_fu_138) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln659_1_fu_2143_p2 = (($signed(flip_count_3_reg_2630) < $signed(32'd20)) ? 1'b1 : 1'b0);

assign icmp_ln659_fu_2201_p2 = (($signed(stackSize_9_fu_2196_p2) < $signed(32'd31)) ? 1'b1 : 1'b0);

assign or_ln540_fu_1217_p2 = (icmp_ln1023_fu_1205_p2 | icmp_ln1023_1_fu_1211_p2);

assign p1_x_V_fu_1387_p3 = ((icmp_ln1027_fu_1375_p2[0:0] == 1'b1) ? p_x_V_reg_2512 : 24'd0);

assign p1_y_V_fu_1380_p3 = ((icmp_ln1027_fu_1375_p2[0:0] == 1'b1) ? p_y_V_reg_2517 : 24'd0);

assign p2_x_V_fu_1406_p3 = ((icmp_ln1027_3_fu_1394_p2[0:0] == 1'b1) ? p_x_V_11_reg_2522 : 24'd0);

assign p2_y_V_fu_1399_p3 = ((icmp_ln1027_3_fu_1394_p2[0:0] == 1'b1) ? p_y_V_12_reg_2527 : 24'd0);

assign p3_x_V_fu_1426_p3 = ((icmp_ln1027_4_fu_1413_p2[0:0] == 1'b1) ? vertex_x_V_q1 : 24'd0);

assign p3_y_V_fu_1418_p3 = ((icmp_ln1027_4_fu_1413_p2[0:0] == 1'b1) ? vertex_y_V_q1 : 24'd0);

assign p4_x_V_fu_1439_p3 = ((icmp_ln1027_5_fu_1434_p2[0:0] == 1'b1) ? vertex_x_V_q0 : 24'd0);

assign p4_y_V_fu_1447_p3 = ((icmp_ln1027_5_fu_1434_p2[0:0] == 1'b1) ? vertex_y_V_q0 : 24'd0);

assign r_V_19_fu_1575_p0 = sext_ln1270_fu_1571_p1;

assign r_V_19_fu_1575_p1 = sext_ln1270_fu_1571_p1;

assign r_V_21_fu_1595_p0 = sext_ln1270_1_fu_1591_p1;

assign r_V_21_fu_1595_p1 = sext_ln1270_1_fu_1591_p1;

assign r_V_23_fu_1615_p0 = sext_ln1270_2_fu_1611_p1;

assign r_V_23_fu_1615_p1 = sext_ln1270_2_fu_1611_p1;

assign r_V_25_fu_1635_p0 = sext_ln1270_3_fu_1631_p1;

assign r_V_25_fu_1635_p1 = sext_ln1270_3_fu_1631_p1;

assign r_V_27_fu_1655_p0 = sext_ln1270_4_fu_1651_p1;

assign r_V_27_fu_1655_p1 = sext_ln1270_4_fu_1651_p1;

assign r_V_29_fu_1675_p0 = sext_ln1270_5_fu_1671_p1;

assign r_V_29_fu_1675_p1 = sext_ln1270_5_fu_1671_p1;

assign r_V_40_fu_1711_p0 = sext_ln1270_3_fu_1631_p1;

assign r_V_40_fu_1711_p1 = sext_ln1270_4_fu_1651_p1;

assign r_V_41_fu_1745_p0 = sext_ln1270_5_fu_1671_p1;

assign r_V_41_fu_1745_p1 = sext_ln1270_fu_1571_p1;

assign r_V_42_fu_1751_p0 = sext_ln1270_1_fu_1591_p1;

assign r_V_42_fu_1751_p1 = sext_ln1270_4_fu_1651_p1;

assign r_V_43_fu_1785_p0 = sext_ln1270_3_fu_1631_p1;

assign r_V_43_fu_1785_p1 = sext_ln1270_fu_1571_p1;

assign r_V_44_fu_1791_p0 = sext_ln1270_1_fu_1591_p1;

assign r_V_44_fu_1791_p1 = sext_ln1270_2_fu_1611_p1;

assign r_V_fu_1705_p0 = sext_ln1270_5_fu_1671_p1;

assign r_V_fu_1705_p1 = sext_ln1270_2_fu_1611_p1;

assign result_fu_1869_p2 = (($signed(det_V_fu_1859_p4) > $signed(48'd0)) ? 1'b1 : 1'b0);

assign ret_V_45_fu_1725_p2 = ($signed(sext_ln1348_28_fu_1717_p1) - $signed(sext_ln1348_29_fu_1721_p1));

assign ret_V_47_fu_1765_p2 = ($signed(sext_ln1348_30_fu_1757_p1) - $signed(sext_ln1348_31_fu_1761_p1));

assign ret_V_49_fu_1805_p2 = ($signed(sext_ln1348_32_fu_1797_p1) - $signed(sext_ln1348_33_fu_1801_p1));

assign ret_V_50_fu_1853_p2 = (ret_V_fu_1835_p2 + r_V_39_fu_1847_p2);

assign ret_V_51_fu_1463_p2 = ($signed(sext_ln813_fu_1455_p1) - $signed(sext_ln1348_fu_1459_p1));

assign ret_V_52_fu_1485_p2 = ($signed(sext_ln813_3_fu_1477_p1) - $signed(sext_ln1348_16_fu_1481_p1));

assign ret_V_53_fu_1503_p2 = ($signed(sext_ln1348_17_fu_1499_p1) - $signed(sext_ln1348_fu_1459_p1));

assign ret_V_54_fu_1521_p2 = ($signed(sext_ln1348_18_fu_1517_p1) - $signed(sext_ln1348_16_fu_1481_p1));

assign ret_V_55_fu_1539_p2 = ($signed(sext_ln1348_19_fu_1535_p1) - $signed(sext_ln1348_fu_1459_p1));

assign ret_V_56_fu_1557_p2 = ($signed(sext_ln1348_20_fu_1553_p1) - $signed(sext_ln1348_16_fu_1481_p1));

assign ret_V_57_fu_1699_p2 = ($signed(sext_ln1347_fu_1695_p1) + $signed(sext_ln813_4_fu_1691_p1));

assign ret_V_58_fu_1739_p2 = ($signed(sext_ln1347_1_fu_1735_p1) + $signed(sext_ln813_5_fu_1731_p1));

assign ret_V_59_fu_1779_p2 = ($signed(sext_ln1347_2_fu_1775_p1) + $signed(sext_ln813_6_fu_1771_p1));

assign ret_V_fu_1835_p2 = (r_V_31_fu_1817_p2 - r_V_35_fu_1829_p2);

assign sext_ln1270_1_fu_1591_p1 = $signed(a2_V_fu_1491_p3);

assign sext_ln1270_2_fu_1611_p1 = $signed(b1_V_fu_1509_p3);

assign sext_ln1270_3_fu_1631_p1 = $signed(b2_V_fu_1527_p3);

assign sext_ln1270_4_fu_1651_p1 = $signed(c1_V_fu_1545_p3);

assign sext_ln1270_5_fu_1671_p1 = $signed(c2_V_fu_1563_p3);

assign sext_ln1270_fu_1571_p1 = $signed(a1_V_fu_1469_p3);

assign sext_ln1347_1_fu_1735_p1 = $signed(trunc_ln818_2_fu_1641_p4);

assign sext_ln1347_2_fu_1775_p1 = $signed(trunc_ln818_4_fu_1681_p4);

assign sext_ln1347_fu_1695_p1 = $signed(trunc_ln818_s_fu_1601_p4);

assign sext_ln1348_16_fu_1481_p1 = $signed(p4_y_V_fu_1447_p3);

assign sext_ln1348_17_fu_1499_p1 = $signed(p2_x_V_fu_1406_p3);

assign sext_ln1348_18_fu_1517_p1 = $signed(p2_y_V_fu_1399_p3);

assign sext_ln1348_19_fu_1535_p1 = $signed(p3_x_V_fu_1426_p3);

assign sext_ln1348_20_fu_1553_p1 = $signed(p3_y_V_fu_1418_p3);

assign sext_ln1348_28_fu_1717_p1 = $signed(r_V_fu_1705_p2);

assign sext_ln1348_29_fu_1721_p1 = $signed(r_V_40_fu_1711_p2);

assign sext_ln1348_30_fu_1757_p1 = $signed(r_V_41_fu_1745_p2);

assign sext_ln1348_31_fu_1761_p1 = $signed(r_V_42_fu_1751_p2);

assign sext_ln1348_32_fu_1797_p1 = $signed(r_V_43_fu_1785_p2);

assign sext_ln1348_33_fu_1801_p1 = $signed(r_V_44_fu_1791_p2);

assign sext_ln1348_fu_1459_p1 = $signed(p4_x_V_fu_1439_p3);

assign sext_ln813_3_fu_1477_p1 = $signed(p1_y_V_fu_1380_p3);

assign sext_ln813_4_fu_1691_p1 = $signed(trunc_ln_fu_1581_p4);

assign sext_ln813_5_fu_1731_p1 = $signed(trunc_ln818_1_fu_1621_p4);

assign sext_ln813_6_fu_1771_p1 = $signed(trunc_ln818_3_fu_1661_p4);

assign sext_ln813_fu_1455_p1 = $signed(p1_x_V_fu_1387_p3);

assign stackSize_6_fu_1269_p2 = ($signed(stackSize_fu_138) + $signed(32'd4294967295));

assign stackSize_7_fu_2229_p2 = (trunc_ln539_reg_2820 + 5'd1);

assign stackSize_8_fu_2240_p2 = (trunc_ln539_reg_2820 + 5'd2);

assign stackSize_9_fu_2196_p2 = (stackSize_5_reg_2280 + 32'd3);

assign trunc_ln539_fu_2221_p1 = stackSize_5_reg_2280[4:0];

assign trunc_ln615_fu_1959_p1 = ap_phi_mux_empty_69_phi_fu_995_p4[30:0];

assign trunc_ln630_fu_2085_p1 = ap_phi_mux_empty_71_phi_fu_1094_p4[30:0];

assign trunc_ln818_1_fu_1621_p4 = {{r_V_23_fu_1615_p2[62:16]}};

assign trunc_ln818_2_fu_1641_p4 = {{r_V_25_fu_1635_p2[62:16]}};

assign trunc_ln818_3_fu_1661_p4 = {{r_V_27_fu_1655_p2[62:16]}};

assign trunc_ln818_4_fu_1681_p4 = {{r_V_29_fu_1675_p2[62:16]}};

assign trunc_ln818_s_fu_1601_p4 = {{r_V_21_fu_1595_p2[62:16]}};

assign trunc_ln_fu_1581_p4 = {{r_V_19_fu_1575_p2[62:16]}};

assign zext_ln444_1_fu_1954_p1 = add_ln444_1_fu_1942_p2;

assign zext_ln444_2_fu_1991_p1 = add_ln444_2_fu_1975_p2;

assign zext_ln444_3_fu_2051_p1 = grp_fu_1199_p2;

assign zext_ln444_4_fu_2080_p1 = add_ln444_4_fu_2068_p2;

assign zext_ln444_5_fu_2117_p1 = add_ln444_5_fu_2101_p2;

assign zext_ln444_6_fu_1981_p1 = add_ln444_2_fu_1975_p2;

assign zext_ln444_7_fu_2107_p1 = add_ln444_5_fu_2101_p2;

assign zext_ln444_fu_1925_p1 = grp_fu_1199_p2;

assign zext_ln539_fu_1223_p1 = ap_phi_mux_stackSize_ph_phi_fu_938_p4;

assign zext_ln541_13_fu_1286_p1 = faceStack_V_q0;

assign zext_ln541_14_fu_1295_p1 = he_next_V_q0;

assign zext_ln541_15_fu_1300_p1 = he_prev_V_q0;

assign zext_ln541_16_fu_1310_p1 = twinEdge_V_reg_2405;

assign zext_ln541_17_fu_1324_p1 = he_face_V_q0;

assign zext_ln541_18_fu_1349_p1 = he_prev_V_q0;

assign zext_ln541_19_fu_1354_p1 = v1_V_reg_2368;

assign zext_ln541_20_fu_1359_p1 = v2_V_reg_2412;

assign zext_ln541_21_fu_1364_p1 = v3_V_reg_2419;

assign zext_ln541_22_fu_1369_p1 = he_tail_V_q1;

assign zext_ln541_23_fu_1895_p1 = twinNextEdge_V_reg_2465;

assign zext_ln541_24_fu_1996_p1 = tri_num_V_i;

assign zext_ln541_25_fu_2001_p1 = e1_V_2_reg_965;

assign zext_ln541_26_fu_2021_p1 = e2_V_8_reg_1001;

assign zext_ln541_27_fu_2030_p1 = e3_V_3_reg_1016;

assign zext_ln541_28_fu_2122_p1 = f2_new_V_reg_2644;

assign zext_ln541_29_fu_2162_p1 = e4_V_3_reg_1063;

assign zext_ln541_30_fu_2175_p1 = e5_V_3_reg_1100;

assign zext_ln541_31_fu_2152_p1 = e6_V_3_reg_1116;

assign zext_ln541_32_fu_2171_p1 = e2_V_4_reg_2596;

assign zext_ln541_33_fu_2184_p1 = e2_V_5_reg_2602;

assign zext_ln541_34_fu_2188_p1 = e2_V_6_reg_2618;

assign zext_ln541_35_fu_2192_p1 = e2_V_7_reg_2624;

assign zext_ln541_fu_1281_p1 = edgeStack_V_q0;

assign zext_ln550_fu_1275_p1 = stackSize_6_fu_1269_p2;

assign zext_ln664_fu_2216_p1 = stackSize_5_reg_2280;

assign zext_ln668_fu_2234_p1 = stackSize_7_fu_2229_p2;

assign zext_ln672_fu_2245_p1 = stackSize_8_fu_2240_p2;

always @ (posedge ap_clk) begin
    zext_ln541_reg_2322[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_14_reg_2380[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_15_reg_2395[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_16_reg_2431[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_18_reg_2476[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_25_reg_2715[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_26_reg_2720[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_27_reg_2725[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_31_reg_2797[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_29_reg_2806[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln541_30_reg_2811[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //tri2d_legalizeEdge
