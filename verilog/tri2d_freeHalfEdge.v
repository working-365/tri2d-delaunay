// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_freeHalfEdge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edgeId,
        he_used_V_address0,
        he_used_V_ce0,
        he_used_V_we0,
        he_used_V_d0,
        freeEdgeCount_i,
        freeEdgeCount_o,
        freeEdgeCount_o_ap_vld,
        freeEdges_V_address0,
        freeEdges_V_ce0,
        freeEdges_V_we0,
        freeEdges_V_d0,
        replaceIdx_i,
        replaceIdx_o,
        replaceIdx_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] edgeId;
output  [15:0] he_used_V_address0;
output   he_used_V_ce0;
output   he_used_V_we0;
output  [0:0] he_used_V_d0;
input  [31:0] freeEdgeCount_i;
output  [31:0] freeEdgeCount_o;
output   freeEdgeCount_o_ap_vld;
output  [8:0] freeEdges_V_address0;
output   freeEdges_V_ce0;
output   freeEdges_V_we0;
output  [14:0] freeEdges_V_d0;
input  [9:0] replaceIdx_i;
output  [9:0] replaceIdx_o;
output   replaceIdx_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg he_used_V_ce0;
reg he_used_V_we0;
reg[31:0] freeEdgeCount_o;
reg freeEdgeCount_o_ap_vld;
reg[8:0] freeEdges_V_address0;
reg freeEdges_V_ce0;
reg freeEdges_V_we0;
reg[9:0] replaceIdx_o;
reg replaceIdx_o_ap_vld;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln451_fu_75_p2;
reg   [0:0] icmp_ln451_reg_133;
wire   [63:0] zext_ln541_fu_66_p1;
wire   [63:0] zext_ln454_fu_89_p1;
wire   [63:0] zext_ln452_fu_118_p1;
wire   [31:0] add_ln452_fu_106_p2;
wire   [9:0] trunc_ln455_fu_123_p1;
wire    ap_CS_fsm_state15;
wire  signed [9:0] sext_ln454_fu_85_p0;
wire  signed [9:0] zext_ln454_fu_89_p0;
wire  signed [10:0] sext_ln454_fu_85_p1;
wire   [10:0] grp_fu_100_p0;
wire   [9:0] grp_fu_100_p1;
wire   [9:0] grp_fu_100_p2;
reg    grp_fu_100_ap_start;
wire    grp_fu_100_ap_done;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

tri2d_srem_11ns_10ns_10_15_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
srem_11ns_10ns_10_15_seq_1_U186(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_100_ap_start),
    .done(grp_fu_100_ap_done),
    .din0(grp_fu_100_p0),
    .din1(grp_fu_100_p1),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln451_reg_133 <= icmp_ln451_fu_75_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln451_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        freeEdgeCount_o = add_ln452_fu_106_p2;
    end else begin
        freeEdgeCount_o = freeEdgeCount_i;
    end
end

always @ (*) begin
    if (((icmp_ln451_fu_75_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        freeEdgeCount_o_ap_vld = 1'b1;
    end else begin
        freeEdgeCount_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((icmp_ln451_fu_75_p2 == 1'd1)) begin
            freeEdges_V_address0 = zext_ln452_fu_118_p1;
        end else if ((icmp_ln451_fu_75_p2 == 1'd0)) begin
            freeEdges_V_address0 = zext_ln454_fu_89_p1;
        end else begin
            freeEdges_V_address0 = 'bx;
        end
    end else begin
        freeEdges_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln451_fu_75_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln451_fu_75_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        freeEdges_V_ce0 = 1'b1;
    end else begin
        freeEdges_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln451_fu_75_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln451_fu_75_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        freeEdges_V_we0 = 1'b1;
    end else begin
        freeEdges_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln451_fu_75_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_100_ap_start = 1'b1;
    end else begin
        grp_fu_100_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        he_used_V_ce0 = 1'b1;
    end else begin
        he_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        he_used_V_we0 = 1'b1;
    end else begin
        he_used_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln451_reg_133 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        replaceIdx_o = trunc_ln455_fu_123_p1;
    end else begin
        replaceIdx_o = replaceIdx_i;
    end
end

always @ (*) begin
    if (((icmp_ln451_reg_133 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        replaceIdx_o_ap_vld = 1'b1;
    end else begin
        replaceIdx_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln451_fu_75_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((icmp_ln451_fu_75_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln452_fu_106_p2 = (freeEdgeCount_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign freeEdges_V_d0 = edgeId;

assign grp_fu_100_p0 = ($signed(sext_ln454_fu_85_p1) + $signed(11'd1));

assign grp_fu_100_p1 = 11'd480;

assign he_used_V_address0 = zext_ln541_fu_66_p1;

assign he_used_V_d0 = 1'd0;

assign icmp_ln451_fu_75_p2 = (($signed(freeEdgeCount_i) < $signed(32'd480)) ? 1'b1 : 1'b0);

assign sext_ln454_fu_85_p0 = replaceIdx_i;

assign sext_ln454_fu_85_p1 = sext_ln454_fu_85_p0;

assign trunc_ln455_fu_123_p1 = grp_fu_100_p2[9:0];

assign zext_ln452_fu_118_p1 = freeEdgeCount_i;

assign zext_ln454_fu_89_p0 = replaceIdx_i;

assign zext_ln454_fu_89_p1 = $unsigned(zext_ln454_fu_89_p0);

assign zext_ln541_fu_66_p1 = edgeId;

endmodule //tri2d_freeHalfEdge
