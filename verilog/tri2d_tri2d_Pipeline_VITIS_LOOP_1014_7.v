// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tri2d_tri2d_Pipeline_VITIS_LOOP_1014_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        con_list_V_address0,
        con_list_V_ce0,
        con_list_V_we0,
        con_list_V_d0,
        output_count_out,
        output_count_out_ap_vld,
        face_used_V_address0,
        face_used_V_ce0,
        face_used_V_q0,
        face_edge_V_address0,
        face_edge_V_ce0,
        face_edge_V_q0,
        he_tail_V_address0,
        he_tail_V_ce0,
        he_tail_V_q0,
        he_tail_V_address1,
        he_tail_V_ce1,
        he_tail_V_q1,
        he_next_V_address0,
        he_next_V_ce0,
        he_next_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] con_list_V_address0;
output   con_list_V_ce0;
output   con_list_V_we0;
output  [35:0] con_list_V_d0;
output  [31:0] output_count_out;
output   output_count_out_ap_vld;
output  [13:0] face_used_V_address0;
output   face_used_V_ce0;
input  [0:0] face_used_V_q0;
output  [13:0] face_edge_V_address0;
output   face_edge_V_ce0;
input  [14:0] face_edge_V_q0;
output  [15:0] he_tail_V_address0;
output   he_tail_V_ce0;
input  [12:0] he_tail_V_q0;
output  [15:0] he_tail_V_address1;
output   he_tail_V_ce1;
input  [12:0] he_tail_V_q1;
output  [15:0] he_next_V_address0;
output   he_next_V_ce0;
input  [14:0] he_next_V_q0;

reg ap_idle;
reg con_list_V_ce0;
reg con_list_V_we0;
reg output_count_out_ap_vld;
reg face_used_V_ce0;
reg face_edge_V_ce0;
reg[15:0] he_tail_V_address0;
reg he_tail_V_ce0;
reg he_tail_V_ce1;
reg[15:0] he_next_V_address0;
reg he_next_V_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln1014_reg_300;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1014_fu_167_p2;
reg   [0:0] icmp_ln1014_reg_300_pp0_iter1_reg;
wire   [63:0] zext_ln1014_fu_179_p1;
reg   [63:0] zext_ln1014_reg_304;
reg   [0:0] face_used_V_load_reg_314;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] face_used_V_load_reg_314_pp0_iter1_reg;
wire   [0:0] icmp_ln1023_fu_189_p2;
reg   [0:0] icmp_ln1023_reg_323;
reg   [0:0] icmp_ln1023_reg_323_pp0_iter2_reg;
wire   [63:0] zext_ln541_fu_195_p1;
reg   [63:0] zext_ln541_reg_327;
reg   [12:0] v2_V_reg_352;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln541_1_fu_200_p1;
wire   [63:0] zext_ln541_2_fu_206_p1;
wire   [63:0] zext_ln1023_fu_243_p1;
wire   [0:0] and_ln1022_1_fu_234_p2;
reg   [13:0] faceIdx_V_fu_46;
wire   [13:0] i_fu_173_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i_4;
reg   [31:0] output_count_fu_50;
wire   [31:0] output_count_1_fu_270_p2;
wire    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln1035_fu_211_p2;
wire   [0:0] icmp_ln1035_1_fu_217_p2;
wire   [0:0] and_ln1022_fu_228_p2;
wire   [0:0] icmp_ln1035_2_fu_222_p2;
wire   [11:0] trunc_ln368_2_fu_255_p1;
wire   [11:0] trunc_ln368_1_fu_252_p1;
wire   [11:0] trunc_ln368_fu_248_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tri2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1014_fu_167_p2 == 1'd0))) begin
            faceIdx_V_fu_46 <= i_fu_173_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            faceIdx_V_fu_46 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        output_count_fu_50 <= 32'd0;
    end else if (((1'd1 == and_ln1022_1_fu_234_p2) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1023_reg_323_pp0_iter2_reg == 1'd0) & (face_used_V_load_reg_314_pp0_iter1_reg == 1'd1))) begin
        output_count_fu_50 <= output_count_1_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        face_used_V_load_reg_314_pp0_iter1_reg <= face_used_V_load_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1014_reg_300 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_used_V_load_reg_314 <= face_used_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1014_reg_300 <= icmp_ln1014_fu_167_p2;
        icmp_ln1014_reg_300_pp0_iter1_reg <= icmp_ln1014_reg_300;
        icmp_ln1023_reg_323_pp0_iter2_reg <= icmp_ln1023_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (face_used_V_load_reg_314 == 1'd1))) begin
        icmp_ln1023_reg_323 <= icmp_ln1023_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1023_reg_323 == 1'd0) & (face_used_V_load_reg_314_pp0_iter1_reg == 1'd1))) begin
        v2_V_reg_352 <= he_tail_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1014_fu_167_p2 == 1'd0))) begin
        zext_ln1014_reg_304[13 : 0] <= zext_ln1014_fu_179_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1023_fu_189_p2 == 1'd0) & (face_used_V_load_reg_314 == 1'd1))) begin
        zext_ln541_reg_327[14 : 0] <= zext_ln541_fu_195_p1[14 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1014_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 14'd0;
    end else begin
        ap_sig_allocacmp_i_4 = faceIdx_V_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        con_list_V_ce0 = 1'b1;
    end else begin
        con_list_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln1022_1_fu_234_p2) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1023_reg_323_pp0_iter2_reg == 1'd0) & (face_used_V_load_reg_314_pp0_iter1_reg == 1'd1))) begin
        con_list_V_we0 = 1'b1;
    end else begin
        con_list_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        face_edge_V_ce0 = 1'b1;
    end else begin
        face_edge_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        face_used_V_ce0 = 1'b1;
    end else begin
        face_used_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            he_next_V_address0 = zext_ln541_1_fu_200_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            he_next_V_address0 = zext_ln541_fu_195_p1;
        end else begin
            he_next_V_address0 = 'bx;
        end
    end else begin
        he_next_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        he_next_V_ce0 = 1'b1;
    end else begin
        he_next_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        he_tail_V_address0 = zext_ln541_2_fu_206_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        he_tail_V_address0 = zext_ln541_1_fu_200_p1;
    end else begin
        he_tail_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        he_tail_V_ce0 = 1'b1;
    end else begin
        he_tail_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        he_tail_V_ce1 = 1'b1;
    end else begin
        he_tail_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1014_reg_300_pp0_iter1_reg == 1'd1))) begin
        output_count_out_ap_vld = 1'b1;
    end else begin
        output_count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1022_1_fu_234_p2 = (icmp_ln1035_2_fu_222_p2 & and_ln1022_fu_228_p2);

assign and_ln1022_fu_228_p2 = (icmp_ln1035_fu_211_p2 & icmp_ln1035_1_fu_217_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign con_list_V_address0 = zext_ln1023_fu_243_p1;

assign con_list_V_d0 = {{{trunc_ln368_2_fu_255_p1}, {trunc_ln368_1_fu_252_p1}}, {trunc_ln368_fu_248_p1}};

assign face_edge_V_address0 = zext_ln1014_reg_304;

assign face_used_V_address0 = zext_ln1014_fu_179_p1;

assign he_tail_V_address1 = zext_ln541_reg_327;

assign i_fu_173_p2 = (ap_sig_allocacmp_i_4 + 14'd1);

assign icmp_ln1014_fu_167_p2 = ((ap_sig_allocacmp_i_4 == 14'd12000) ? 1'b1 : 1'b0);

assign icmp_ln1023_fu_189_p2 = ((face_edge_V_q0 == 15'd32767) ? 1'b1 : 1'b0);

assign icmp_ln1035_1_fu_217_p2 = ((v2_V_reg_352 > 13'd2) ? 1'b1 : 1'b0);

assign icmp_ln1035_2_fu_222_p2 = ((he_tail_V_q0 > 13'd2) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_211_p2 = ((he_tail_V_q1 > 13'd2) ? 1'b1 : 1'b0);

assign output_count_1_fu_270_p2 = (output_count_fu_50 + 32'd1);

assign output_count_out = output_count_fu_50;

assign trunc_ln368_1_fu_252_p1 = v2_V_reg_352[11:0];

assign trunc_ln368_2_fu_255_p1 = he_tail_V_q0[11:0];

assign trunc_ln368_fu_248_p1 = he_tail_V_q1[11:0];

assign zext_ln1014_fu_179_p1 = ap_sig_allocacmp_i_4;

assign zext_ln1023_fu_243_p1 = output_count_fu_50;

assign zext_ln541_1_fu_200_p1 = he_next_V_q0;

assign zext_ln541_2_fu_206_p1 = he_next_V_q0;

assign zext_ln541_fu_195_p1 = face_edge_V_q0;

always @ (posedge ap_clk) begin
    zext_ln1014_reg_304[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln541_reg_327[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //tri2d_tri2d_Pipeline_VITIS_LOOP_1014_7
